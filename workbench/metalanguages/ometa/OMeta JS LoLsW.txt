{"name": "OMeta JS LoLsW",
 "languages": [
	{"name": "OMeta JS",
	 "meta": true,
	 "code": [
		{"name": "BSOMetaJSParser",
		 "startRule": "topLevel"},
		{"name": "BSOMetaJSTranslator",
		 "startRule": "trans",
		 "makeList": true}]},
	{"name": "ometa parser",
	 "code": [
		{"name": "BSOMetaJSParser",
		 "startRule": "topLevel"}]},
	{"name": "Javascript code",
	 "meta": true,
	 "code": [
		{"name": "BSOMetaJSTranslator",
		 "startRule": "trans",
		 "makeList": true}]}],
 "views": [
	{"name": "Javascript Compiler",
	 "language": "ometa parser",
	 "editor": {"name": "ACE", "height": "300px", "gutters": true},
	 "contents": "ometa BSJSParser {\n  space        = ^space | fromTo('//', '\\n') | fromTo('/*', '*/'),\n  nameFirst    = letter | '$' | '_',\n  nameRest     = nameFirst | digit,\n  iName        = <nameFirst nameRest*>,\n  isKeyword :x = ?BSJSParser._isKeyword(x),\n  name         = iName:n ~isKeyword(n)                                               -> [#name, n=='self' ? '$elf' : n],\n  keyword      = iName:k isKeyword(k)                                                -> [k, k],\n  hexDigit     = char:x {this.hexDigits.indexOf(x.toLowerCase())}:v ?(v >= 0)        -> v,\n  hexLit       = hexLit:n hexDigit:d                                                 -> (n * 16 + d)\n               | hexDigit,\n  number       = ``0x'' hexLit:n                                                     -> [#number, n]\n               | <digit+ ('.' digit+)?>:f                                            -> [#number, parseFloat(f)],\n  escapeChar   = <'\\\\' ( 'u' hexDigit hexDigit hexDigit hexDigit\n                       | 'x' hexDigit hexDigit\n                       | char                                    )>:s                -> unescape(s),\n  str          = seq('\"\"\"')  (~seq('\"\"\"') char)*:cs seq('\"\"\"')                       -> [#string, cs.join('')]\n               | '\\'' (escapeChar | ~'\\'' char)*:cs '\\''                             -> [#string, cs.join('')]\n               | '\"'  (escapeChar | ~'\"'  char)*:cs '\"'                              -> [#string, cs.join('')]\n               | ('#' | '`') iName:n                                                 -> [#string, n],\n  special      = ( '('   | ')'    | '{'    | '}'     | '['    | ']'     | ','    \n                 | ';'   | '?'    | ':'    | ``!=='' | ``!='' | ``==='' | ``==''\n                 | ``='' | ``>='' | '>'    | ``<=''  | '<'    | ``++''  | ``+=''\n                 | '+'   | ``--'' | ``-='' | '-'     | ``*='' | '*'     | ``/=''\n                 | '/'   | ``%='' | '%'    | ``&&='' | ``&&'' | ``||='' | ``||''\n                 | '.'   | '!'                                                   ):s -> [s, s],\n  tok          = spaces (name | keyword | number | str | special),\n  toks         = token*:ts spaces end                                                -> ts,\n  token :tt    = tok:t ?(t[0] == tt)                                                 -> t[1],\n  spacesNoNl   = (~'\\n' space)*,\n  expr         = orExpr:e ( \"?\"   expr:t   \":\" expr:f                                -> [#condExpr, e, t, f]\n                          | \"=\"   expr:rhs                                           -> [#set,  e, rhs]\n                          | \"+=\"  expr:rhs                                           -> [#mset, e, \"+\",  rhs]\n                          | \"-=\"  expr:rhs                                           -> [#mset, e, \"-\",  rhs]\n                          | \"*=\"  expr:rhs                                           -> [#mset, e, \"*\",  rhs]\n                          | \"/=\"  expr:rhs                                           -> [#mset, e, \"/\",  rhs]\n                          | \"%=\"  expr:rhs                                           -> [#mset, e, \"%\",  rhs]\n                          | \"&&=\" expr:rhs                                           -> [#mset, e, \"&&\", rhs]\n                          | \"||=\" expr:rhs                                           -> [#mset, e, \"||\", rhs]\n                          | empty                                                    -> e\n                          ),\n  orExpr       = orExpr:x \"||\" andExpr:y                                             -> [#binop, \"||\", x, y]\n               | andExpr,\n  andExpr      = andExpr:x \"&&\" eqExpr:y                                             -> [#binop, \"&&\", x, y]\n               | eqExpr,\n  eqExpr       = eqExpr:x ( \"==\"  relExpr:y                                          -> [#binop, \"==\",  x, y]\n                          | \"!=\"  relExpr:y                                          -> [#binop, \"!=\",  x, y]\n                          | \"===\" relExpr:y                                          -> [#binop, \"===\", x, y]\n                          | \"!==\" relExpr:y                                          -> [#binop, \"!==\", x, y]\n                          )\n               | relExpr,\n  relExpr      = relExpr:x ( \">\"          addExpr:y                                  -> [#binop, \">\",          x, y]\n                           | \">=\"         addExpr:y                                  -> [#binop, \">=\",         x, y]\n                           | \"<\"          addExpr:y                                  -> [#binop, \"<\",          x, y]\n                           | \"<=\"         addExpr:y                                  -> [#binop, \"<=\",         x, y]\n                           | \"instanceof\" addExpr:y                                  -> [#binop, \"instanceof\", x, y]\n                           )\n               | addExpr,\n  addExpr      = addExpr:x \"+\" mulExpr:y                                             -> [#binop, \"+\",          x, y]\n               | addExpr:x \"-\" mulExpr:y                                             -> [#binop, \"-\",          x, y]\n               | mulExpr,\n  mulExpr      = mulExpr:x \"*\" unary:y                                               -> [#binop, \"*\",          x, y]\n               | mulExpr:x \"/\" unary:y                                               -> [#binop, \"/\",          x, y]\n               | mulExpr:x \"%\" unary:y                                               -> [#binop, \"%\",          x, y]\n               | unary,\n  unary        = \"-\"      postfix:p                                                  -> [#unop,  \"-\",        p]\n               | \"+\"      postfix:p                                                  -> [#unop,  \"+\",        p]\n               | \"++\"     postfix:p                                                  -> [#preop, \"++\",       p]\n               | \"--\"     postfix:p                                                  -> [#preop, \"--\",       p]\n               | \"!\"      unary:p                                                    -> [#unop,  \"!\",        p]\n               | \"void\"   unary:p                                                    -> [#unop,  \"void\",     p]\n               | \"delete\" unary:p                                                    -> [#unop,  \"delete\",   p]\n               | \"typeof\" unary:p                                                    -> [#unop,  \"typeof\",   p]\n               | postfix,\n  postfix      = primExpr:p ( spacesNoNl \"++\"                                        -> [#postop, \"++\", p]\n                            | spacesNoNl \"--\"                                        -> [#postop, \"--\", p]\n                            | empty                                                  -> p\n                            ),\n  primExpr     = primExpr:p ( \"[\" expr:i \"]\"                                         -> [#getp, i, p]\n                            | \".\" \"name\":m \"(\" listOf(#expr, ','):as \")\"             -> [#send, m, p].concat(as)\n                            | \".\" \"name\":f                                           -> [#getp, [#string, f], p]\n                            | \"(\" listOf(#expr, ','):as \")\"                          -> [#call, p].concat(as)\n                            )\n               | primExprHd,\n  primExprHd   = \"(\" expr:e \")\"                                                      -> e\n               | \"this\"                                                              -> [#this]\n               | \"name\":n                                                            -> [#get, n]\n               | \"number\":n                                                          -> [#number, n]\n               | \"string\":s                                                          -> [#string, s]\n               | \"function\" funcRest\n               | \"new\" \"name\":n \"(\" listOf(#expr, ','):as \")\"                        -> [#new, n].concat(as)\n               | \"[\" listOf(#expr, ','):es \"]\"                                       -> [#arr].concat(es)\n               | json\n               | re,\n  json         = \"{\" listOf(#jsonBinding, ','):bs \"}\"                                -> [#json].concat(bs),\n  jsonBinding  = jsonPropName:n \":\" expr:v                                           -> [#binding, n, v],\n  jsonPropName = \"name\" | \"number\" | \"string\",\n  re           = spaces <'/' reBody '/' reFlag*>:x                                   -> [#regExpr, x],\n  reBody       = re1stChar reChar*,\n  re1stChar    = ~('*' | '\\\\' | '/' | '[') reNonTerm\n               | escapeChar\n               | reClass,\n  reChar       = re1stChar | '*',\n  reNonTerm    = ~('\\n' | '\\r') char,\n  reClass      = '[' reClassChar* ']',\n  reClassChar  = ~('[' | ']') reChar,\n  reFlag       = nameFirst,\n  formal       = spaces \"name\",\n  funcRest     = \"(\" listOf(#formal, ','):fs \")\" \"{\" srcElems:body \"}\"               -> [#func, fs, body],\n  sc           = spacesNoNl ('\\n' | &'}' | end)\n               | \";\",\n  binding      = \"name\":n ( \"=\" expr\n                          | empty -> [#get, 'undefined'] ):v                         -> [#var, n, v],\n  block        = \"{\" srcElems:ss \"}\"                                                 -> ss,\n  stmt         = block\n               | \"var\" listOf(#binding, ','):bs sc                                   -> [#begin].concat(bs)\n               | \"if\" \"(\" expr:c \")\" stmt:t ( \"else\" stmt\n                                            | empty -> [#get, 'undefined'] ):f       -> [#if, c, t, f]\n               | \"while\" \"(\" expr:c \")\" stmt:s                                       -> [#while,   c, s]\n               | \"do\" stmt:s \"while\" \"(\" expr:c \")\" sc                               -> [#doWhile, s, c]\n               | \"for\" \"(\" ( \"var\" binding\n                           | expr\n                           | empty -> [#get, 'undefined'] ):i\n                       \";\" ( expr\n                           | empty -> [#get, 'true']      ):c\n                       \";\" ( expr\n                           | empty -> [#get, 'undefined'] ):u\n                       \")\" stmt:s                                                    -> [#for, i, c, u, s]\n               | \"for\" \"(\" ( \"var\" \"name\":n -> [#var, n, [#get, 'undefined']]\n                           | expr                                             ):v\n                      \"in\" expr:e\n                       \")\" stmt:s                                                    -> [#forIn, v, e, s]\n               | \"switch\" \"(\" expr:e \")\" \"{\"\n                   ( \"case\" expr:c \":\" srcElems:cs -> [#case, c, cs]\n                   | \"default\"     \":\" srcElems:cs -> [#default, cs] )*:cs\n                 \"}\"                                                                 -> [#switch, e].concat(cs)\n               | \"break\" sc                                                          -> [#break]\n               | \"continue\" sc                                                       -> [#continue]\n               | \"throw\" spacesNoNl expr:e sc                                        -> [#throw, e]\n               | \"try\" block:t \"catch\" \"(\" \"name\":e \")\" block:c\n                             ( \"finally\" block\n                             | empty -> [#get, 'undefined'] ):f                      -> [#try, t, e, c, f]\n               | \"return\" ( expr\n                          | empty -> [#get, 'undefined'] ):e sc                      -> [#return, e]\n               | \"with\" \"(\" expr:x \")\" stmt:s                                        -> [#with, x, s]\n               | expr:e sc                                                           -> e\n               | \";\"                                                                 -> [#get, \"undefined\"],\n  srcElem      = \"function\" \"name\":n funcRest:f                                      -> [#var, n, f]\n               | stmt,\n  srcElems     = srcElem*:ss                                                         -> [#begin].concat(ss),\n\n  topLevel     = srcElems:r spaces end                                               -> r\n}\nBSJSParser.hexDigits = \"0123456789abcdef\"\nBSJSParser.keywords  = { }\nkeywords = [\"break\", \"case\", \"catch\", \"continue\", \"default\", \"delete\", \"do\", \"else\", \"finally\", \"for\", \"function\", \"if\", \"in\",\n            \"instanceof\", \"new\", \"return\", \"switch\", \"this\", \"throw\", \"try\", \"typeof\", \"var\", \"void\", \"while\", \"with\", \"ometa\"]\nfor (var idx = 0; idx < keywords.length; idx++)\n  BSJSParser.keywords[keywords[idx]] = true\nBSJSParser._isKeyword = function(k) { return this.keywords.hasOwnProperty(k) }\n\n\nometa BSSemActionParser <: BSJSParser {\n  curlySemAction = \"{\" expr:r sc \"}\" spaces                                  -> r\n                 | \"{\" (srcElem:s &srcElem -> s)*:ss\n                       ( expr:r sc -> [#return, r] | srcElem):s {ss.push(s)}\n                   \"}\" spaces                                                -> [#send, #call,\n                                                                                        [#func, [], [#begin].concat(ss)],\n                                                                                        [#this]],\n  semAction      = curlySemAction\n                 | primExpr:r spaces                                         -> r\n}\n\nometa BSJSTranslator {\n  trans      = [:t apply(t):ans]     -> ans,\n  curlyTrans = [#begin curlyTrans:r] -> r\n             | [#begin trans*:rs]    -> ('{' + rs.join(';') + '}')\n             | trans:r               -> ('{' + r + '}'),\n\n  this                                                  -> 'this',\n  break                                                 -> 'break',\n  continue                                              -> 'continue',\n  number   :n                                           -> ('(' + n + ')'),\n  string   :s                                           -> s.toProgramString(),\n  regExpr  :x                                           -> x,\n  arr      trans*:xs                                    -> ('[' + xs.join(',') + ']'),\n  unop     :op trans:x                                  -> ('(' + op + ' ' + x + ')'),\n  getp     trans:fd trans:x                             -> (x + '[' + fd + ']'),\n  get      :x                                           -> x,\n  set      trans:lhs trans:rhs                          -> ('(' + lhs + '=' + rhs + ')'),\n  mset     trans:lhs :op trans:rhs                      -> ('(' + lhs + op + '=' + rhs + ')'),\n  binop    :op trans:x trans:y                          -> ('(' + x + ' ' + op + ' ' + y + ')'),\n  preop    :op trans:x                                  -> (op + x),\n  postop   :op trans:x                                  -> (x + op),\n  return   trans:x                                      -> ('return ' + x),\n  with     trans:x curlyTrans:s                         -> ('with(' + x + ')' + s),\n  if       trans:cond curlyTrans:t curlyTrans:e         -> ('if(' + cond + ')' + t + 'else' + e),\n  condExpr trans:cond trans:t trans:e                   -> ('(' + cond + '?' + t + ':' + e + ')'),\n  while    trans:cond curlyTrans:body                   -> ('while(' + cond + ')' + body),\n  doWhile  curlyTrans:body trans:cond                   -> ('do' + body + 'while(' + cond + ')'),\n  for      trans:init trans:cond trans:upd\n           curlyTrans:body                              -> ('for(' + init + ';' + cond + ';' + upd + ')' + body),\n  forIn    trans:x trans:arr curlyTrans:body            -> ('for(' + x + ' in ' + arr + ')' + body),\n  begin    trans:x end                                  -> x,\n  begin    (trans:x\n              ( (?(x[x.length - 1] == '}') | end) -> x\n              | empty                             -> (x  + ';')\n              )\n           )*:xs                                        -> ('{' + xs.join('') + '}'),\n  func     :args curlyTrans:body                        -> ('(function (' + args.join(',') + ')' + body + ')'),\n  call     trans:fn trans*:args                         -> (fn + '(' + args.join(',') + ')'),\n  send     :msg trans:recv trans*:args                  -> (recv + '.' + msg + '(' + args.join(',') + ')'),\n  new      :cls trans*:args                             -> ('new ' + cls + '(' + args.join(',') + ')'),\n  var      :name trans:val                              -> ('var ' + name + '=' + val),\n  throw    trans:x                                      -> ('throw ' + x),\n  try      curlyTrans:x :name curlyTrans:c curlyTrans:f -> ('try ' + x + 'catch(' + name + ')' + c + 'finally' + f),\n  json     trans*:props                                 -> ('({' + props.join(',') + '})'),\n  binding  :name trans:val                              -> (name.toProgramString() + ': ' + val),\n  switch   trans:x trans*:cases                         -> ('switch(' + x + '){' + cases.join(';') + '}'),\n  case     trans:x trans:y                              -> ('case ' + x + ': '+ y),\n  default          trans:y                              -> ('default: ' + y)\n}\n"},
	{"name": "Javascript code",
	 "language": "Javascript code",
	 "inputView": "Javascript Compiler",
	 "editor": {"name": "ACE", "height": "300px", "gutters": true, "readOnly": true},
	 "contents": "{BSJSParser=objectThatDelegatesTo(OMeta,{\n\"space\":function(){var $elf=this,_fromIdx=this.input.idx;return this._or((function(){return OMeta._superApplyWithArgs(this,'space')}),(function(){return this._applyWithArgs(\"fromTo\",\"//\",\"\\n\")}),(function(){return this._applyWithArgs(\"fromTo\",\"/*\",\"*/\")}))},\n\"nameFirst\":function(){var $elf=this,_fromIdx=this.input.idx;return this._or((function(){return this._apply(\"letter\")}),(function(){return (function(){switch(this._apply('anything')){case \"$\":return \"$\";case \"_\":return \"_\";default: throw fail}}).call(this)}))},\n\"nameRest\":function(){var $elf=this,_fromIdx=this.input.idx;return this._or((function(){return this._apply(\"nameFirst\")}),(function(){return this._apply(\"digit\")}))},\n\"iName\":function(){var $elf=this,_fromIdx=this.input.idx;return this._consumedBy((function(){return (function(){this._apply(\"nameFirst\");return this._many((function(){return this._apply(\"nameRest\")}))}).call(this)}))},\n\"isKeyword\":function(){var $elf=this,_fromIdx=this.input.idx,x;return (function(){x=this._apply(\"anything\");return this._pred(BSJSParser._isKeyword(x))}).call(this)},\n\"name\":function(){var $elf=this,_fromIdx=this.input.idx,n;return (function(){n=this._apply(\"iName\");this._not((function(){return this._applyWithArgs(\"isKeyword\",n)}));return [\"name\",((n == \"self\")?\"$elf\":n)]}).call(this)},\n\"keyword\":function(){var $elf=this,_fromIdx=this.input.idx,k;return (function(){k=this._apply(\"iName\");this._applyWithArgs(\"isKeyword\",k);return [k,k]}).call(this)},\n\"hexDigit\":function(){var $elf=this,_fromIdx=this.input.idx,x,v;return (function(){x=this._apply(\"char\");v=this[\"hexDigits\"].indexOf(x.toLowerCase());this._pred((v >= (0)));return v}).call(this)},\n\"hexLit\":function(){var $elf=this,_fromIdx=this.input.idx,n,d;return this._or((function(){return (function(){n=this._apply(\"hexLit\");d=this._apply(\"hexDigit\");return ((n * (16)) + d)}).call(this)}),(function(){return this._apply(\"hexDigit\")}))},\n\"number\":function(){var $elf=this,_fromIdx=this.input.idx,n,f;return this._or((function(){return (function(){switch(this._apply('anything')){case \"0\":return (function(){this._applyWithArgs(\"exactly\",\"x\");\"0x\";n=this._apply(\"hexLit\");return [\"number\",n]}).call(this);default: throw fail}}).call(this)}),(function(){return (function(){f=this._consumedBy((function(){return (function(){this._many1((function(){return this._apply(\"digit\")}));return this._opt((function(){return (function(){this._applyWithArgs(\"exactly\",\".\");return this._many1((function(){return this._apply(\"digit\")}))}).call(this)}))}).call(this)}));return [\"number\",parseFloat(f)]}).call(this)}))},\n\"escapeChar\":function(){var $elf=this,_fromIdx=this.input.idx,s;return (function(){s=this._consumedBy((function(){return (function(){this._applyWithArgs(\"exactly\",\"\\\\\");return this._or((function(){return (function(){switch(this._apply('anything')){case \"u\":return (function(){this._apply(\"hexDigit\");this._apply(\"hexDigit\");this._apply(\"hexDigit\");return this._apply(\"hexDigit\")}).call(this);case \"x\":return (function(){this._apply(\"hexDigit\");return this._apply(\"hexDigit\")}).call(this);default: throw fail}}).call(this)}),(function(){return this._apply(\"char\")}))}).call(this)}));return unescape(s)}).call(this)},\n\"str\":function(){var $elf=this,_fromIdx=this.input.idx,cs,n;return this._or((function(){return (function(){switch(this._apply('anything')){case \"\\\"\":return this._or((function(){return (function(){switch(this._apply('anything')){case \"\\\"\":return (function(){this._applyWithArgs(\"exactly\",\"\\\"\");\"\\\"\\\"\\\"\";cs=this._many((function(){return (function(){this._not((function(){return (function(){this._applyWithArgs(\"exactly\",\"\\\"\");this._applyWithArgs(\"exactly\",\"\\\"\");this._applyWithArgs(\"exactly\",\"\\\"\");return \"\\\"\\\"\\\"\"}).call(this)}));return this._apply(\"char\")}).call(this)}));this._applyWithArgs(\"exactly\",\"\\\"\");this._applyWithArgs(\"exactly\",\"\\\"\");this._applyWithArgs(\"exactly\",\"\\\"\");\"\\\"\\\"\\\"\";return [\"string\",cs.join(\"\")]}).call(this);default: throw fail}}).call(this)}),(function(){return (function(){cs=this._many((function(){return this._or((function(){return this._apply(\"escapeChar\")}),(function(){return (function(){this._not((function(){return this._applyWithArgs(\"exactly\",\"\\\"\")}));return this._apply(\"char\")}).call(this)}))}));this._applyWithArgs(\"exactly\",\"\\\"\");return [\"string\",cs.join(\"\")]}).call(this)}));case \"\\'\":return (function(){cs=this._many((function(){return this._or((function(){return this._apply(\"escapeChar\")}),(function(){return (function(){this._not((function(){return this._applyWithArgs(\"exactly\",\"\\'\")}));return this._apply(\"char\")}).call(this)}))}));this._applyWithArgs(\"exactly\",\"\\'\");return [\"string\",cs.join(\"\")]}).call(this);default: throw fail}}).call(this)}),(function(){return (function(){(function(){switch(this._apply('anything')){case \"#\":return \"#\";case \"`\":return \"`\";default: throw fail}}).call(this);n=this._apply(\"iName\");return [\"string\",n]}).call(this)}))},\n\"special\":function(){var $elf=this,_fromIdx=this.input.idx,s;return (function(){s=(function(){switch(this._apply('anything')){case \"(\":return \"(\";case \")\":return \")\";case \"{\":return \"{\";case \"}\":return \"}\";case \"[\":return \"[\";case \"]\":return \"]\";case \",\":return \",\";case \";\":return \";\";case \"?\":return \"?\";case \":\":return \":\";case \"!\":return this._or((function(){return (function(){switch(this._apply('anything')){case \"=\":return this._or((function(){return (function(){switch(this._apply('anything')){case \"=\":return \"!==\";default: throw fail}}).call(this)}),(function(){return \"!=\"}));default: throw fail}}).call(this)}),(function(){return \"!\"}));case \"=\":return this._or((function(){return (function(){switch(this._apply('anything')){case \"=\":return this._or((function(){return (function(){switch(this._apply('anything')){case \"=\":return \"===\";default: throw fail}}).call(this)}),(function(){return \"==\"}));default: throw fail}}).call(this)}),(function(){return \"=\"}));case \">\":return this._or((function(){return (function(){switch(this._apply('anything')){case \"=\":return \">=\";default: throw fail}}).call(this)}),(function(){return \">\"}));case \"<\":return this._or((function(){return (function(){switch(this._apply('anything')){case \"=\":return \"<=\";default: throw fail}}).call(this)}),(function(){return \"<\"}));case \"+\":return this._or((function(){return (function(){switch(this._apply('anything')){case \"+\":return \"++\";case \"=\":return \"+=\";default: throw fail}}).call(this)}),(function(){return \"+\"}));case \"-\":return this._or((function(){return (function(){switch(this._apply('anything')){case \"-\":return \"--\";case \"=\":return \"-=\";default: throw fail}}).call(this)}),(function(){return \"-\"}));case \"*\":return this._or((function(){return (function(){switch(this._apply('anything')){case \"=\":return \"*=\";default: throw fail}}).call(this)}),(function(){return \"*\"}));case \"/\":return this._or((function(){return (function(){switch(this._apply('anything')){case \"=\":return \"/=\";default: throw fail}}).call(this)}),(function(){return \"/\"}));case \"%\":return this._or((function(){return (function(){switch(this._apply('anything')){case \"=\":return \"%=\";default: throw fail}}).call(this)}),(function(){return \"%\"}));case \"&\":return (function(){switch(this._apply('anything')){case \"&\":return this._or((function(){return (function(){switch(this._apply('anything')){case \"=\":return \"&&=\";default: throw fail}}).call(this)}),(function(){return \"&&\"}));default: throw fail}}).call(this);case \"|\":return (function(){switch(this._apply('anything')){case \"|\":return this._or((function(){return (function(){switch(this._apply('anything')){case \"=\":return \"||=\";default: throw fail}}).call(this)}),(function(){return \"||\"}));default: throw fail}}).call(this);case \".\":return \".\";default: throw fail}}).call(this);return [s,s]}).call(this)},\n\"tok\":function(){var $elf=this,_fromIdx=this.input.idx;return (function(){this._apply(\"spaces\");return this._or((function(){return this._apply(\"name\")}),(function(){return this._apply(\"keyword\")}),(function(){return this._apply(\"number\")}),(function(){return this._apply(\"str\")}),(function(){return this._apply(\"special\")}))}).call(this)},\n\"toks\":function(){var $elf=this,_fromIdx=this.input.idx,ts;return (function(){ts=this._many((function(){return this._apply(\"token\")}));this._apply(\"spaces\");this._apply(\"end\");return ts}).call(this)},\n\"token\":function(){var $elf=this,_fromIdx=this.input.idx,tt,t;return (function(){tt=this._apply(\"anything\");t=this._apply(\"tok\");this._pred((t[(0)] == tt));return t[(1)]}).call(this)},\n\"spacesNoNl\":function(){var $elf=this,_fromIdx=this.input.idx;return this._many((function(){return (function(){this._not((function(){return this._applyWithArgs(\"exactly\",\"\\n\")}));return this._apply(\"space\")}).call(this)}))},\n\"expr\":function(){var $elf=this,_fromIdx=this.input.idx,e,t,f,rhs;return (function(){e=this._apply(\"orExpr\");return this._or((function(){return (function(){this._applyWithArgs(\"token\",\"?\");t=this._apply(\"expr\");this._applyWithArgs(\"token\",\":\");f=this._apply(\"expr\");return [\"condExpr\",e,t,f]}).call(this)}),(function(){return (function(){this._applyWithArgs(\"token\",\"=\");rhs=this._apply(\"expr\");return [\"set\",e,rhs]}).call(this)}),(function(){return (function(){this._applyWithArgs(\"token\",\"+=\");rhs=this._apply(\"expr\");return [\"mset\",e,\"+\",rhs]}).call(this)}),(function(){return (function(){this._applyWithArgs(\"token\",\"-=\");rhs=this._apply(\"expr\");return [\"mset\",e,\"-\",rhs]}).call(this)}),(function(){return (function(){this._applyWithArgs(\"token\",\"*=\");rhs=this._apply(\"expr\");return [\"mset\",e,\"*\",rhs]}).call(this)}),(function(){return (function(){this._applyWithArgs(\"token\",\"/=\");rhs=this._apply(\"expr\");return [\"mset\",e,\"/\",rhs]}).call(this)}),(function(){return (function(){this._applyWithArgs(\"token\",\"%=\");rhs=this._apply(\"expr\");return [\"mset\",e,\"%\",rhs]}).call(this)}),(function(){return (function(){this._applyWithArgs(\"token\",\"&&=\");rhs=this._apply(\"expr\");return [\"mset\",e,\"&&\",rhs]}).call(this)}),(function(){return (function(){this._applyWithArgs(\"token\",\"||=\");rhs=this._apply(\"expr\");return [\"mset\",e,\"||\",rhs]}).call(this)}),(function(){return (function(){this._apply(\"empty\");return e}).call(this)}))}).call(this)},\n\"orExpr\":function(){var $elf=this,_fromIdx=this.input.idx,x,y;return this._or((function(){return (function(){x=this._apply(\"orExpr\");this._applyWithArgs(\"token\",\"||\");y=this._apply(\"andExpr\");return [\"binop\",\"||\",x,y]}).call(this)}),(function(){return this._apply(\"andExpr\")}))},\n\"andExpr\":function(){var $elf=this,_fromIdx=this.input.idx,x,y;return this._or((function(){return (function(){x=this._apply(\"andExpr\");this._applyWithArgs(\"token\",\"&&\");y=this._apply(\"eqExpr\");return [\"binop\",\"&&\",x,y]}).call(this)}),(function(){return this._apply(\"eqExpr\")}))},\n\"eqExpr\":function(){var $elf=this,_fromIdx=this.input.idx,x,y;return this._or((function(){return (function(){x=this._apply(\"eqExpr\");return this._or((function(){return (function(){this._applyWithArgs(\"token\",\"==\");y=this._apply(\"relExpr\");return [\"binop\",\"==\",x,y]}).call(this)}),(function(){return (function(){this._applyWithArgs(\"token\",\"!=\");y=this._apply(\"relExpr\");return [\"binop\",\"!=\",x,y]}).call(this)}),(function(){return (function(){this._applyWithArgs(\"token\",\"===\");y=this._apply(\"relExpr\");return [\"binop\",\"===\",x,y]}).call(this)}),(function(){return (function(){this._applyWithArgs(\"token\",\"!==\");y=this._apply(\"relExpr\");return [\"binop\",\"!==\",x,y]}).call(this)}))}).call(this)}),(function(){return this._apply(\"relExpr\")}))},\n\"relExpr\":function(){var $elf=this,_fromIdx=this.input.idx,x,y;return this._or((function(){return (function(){x=this._apply(\"relExpr\");return this._or((function(){return (function(){this._applyWithArgs(\"token\",\">\");y=this._apply(\"addExpr\");return [\"binop\",\">\",x,y]}).call(this)}),(function(){return (function(){this._applyWithArgs(\"token\",\">=\");y=this._apply(\"addExpr\");return [\"binop\",\">=\",x,y]}).call(this)}),(function(){return (function(){this._applyWithArgs(\"token\",\"<\");y=this._apply(\"addExpr\");return [\"binop\",\"<\",x,y]}).call(this)}),(function(){return (function(){this._applyWithArgs(\"token\",\"<=\");y=this._apply(\"addExpr\");return [\"binop\",\"<=\",x,y]}).call(this)}),(function(){return (function(){this._applyWithArgs(\"token\",\"instanceof\");y=this._apply(\"addExpr\");return [\"binop\",\"instanceof\",x,y]}).call(this)}))}).call(this)}),(function(){return this._apply(\"addExpr\")}))},\n\"addExpr\":function(){var $elf=this,_fromIdx=this.input.idx,x,y;return this._or((function(){return (function(){x=this._apply(\"addExpr\");this._applyWithArgs(\"token\",\"+\");y=this._apply(\"mulExpr\");return [\"binop\",\"+\",x,y]}).call(this)}),(function(){return (function(){x=this._apply(\"addExpr\");this._applyWithArgs(\"token\",\"-\");y=this._apply(\"mulExpr\");return [\"binop\",\"-\",x,y]}).call(this)}),(function(){return this._apply(\"mulExpr\")}))},\n\"mulExpr\":function(){var $elf=this,_fromIdx=this.input.idx,x,y;return this._or((function(){return (function(){x=this._apply(\"mulExpr\");this._applyWithArgs(\"token\",\"*\");y=this._apply(\"unary\");return [\"binop\",\"*\",x,y]}).call(this)}),(function(){return (function(){x=this._apply(\"mulExpr\");this._applyWithArgs(\"token\",\"/\");y=this._apply(\"unary\");return [\"binop\",\"/\",x,y]}).call(this)}),(function(){return (function(){x=this._apply(\"mulExpr\");this._applyWithArgs(\"token\",\"%\");y=this._apply(\"unary\");return [\"binop\",\"%\",x,y]}).call(this)}),(function(){return this._apply(\"unary\")}))},\n\"unary\":function(){var $elf=this,_fromIdx=this.input.idx,p;return this._or((function(){return (function(){this._applyWithArgs(\"token\",\"-\");p=this._apply(\"postfix\");return [\"unop\",\"-\",p]}).call(this)}),(function(){return (function(){this._applyWithArgs(\"token\",\"+\");p=this._apply(\"postfix\");return [\"unop\",\"+\",p]}).call(this)}),(function(){return (function(){this._applyWithArgs(\"token\",\"++\");p=this._apply(\"postfix\");return [\"preop\",\"++\",p]}).call(this)}),(function(){return (function(){this._applyWithArgs(\"token\",\"--\");p=this._apply(\"postfix\");return [\"preop\",\"--\",p]}).call(this)}),(function(){return (function(){this._applyWithArgs(\"token\",\"!\");p=this._apply(\"unary\");return [\"unop\",\"!\",p]}).call(this)}),(function(){return (function(){this._applyWithArgs(\"token\",\"void\");p=this._apply(\"unary\");return [\"unop\",\"void\",p]}).call(this)}),(function(){return (function(){this._applyWithArgs(\"token\",\"delete\");p=this._apply(\"unary\");return [\"unop\",\"delete\",p]}).call(this)}),(function(){return (function(){this._applyWithArgs(\"token\",\"typeof\");p=this._apply(\"unary\");return [\"unop\",\"typeof\",p]}).call(this)}),(function(){return this._apply(\"postfix\")}))},\n\"postfix\":function(){var $elf=this,_fromIdx=this.input.idx,p;return (function(){p=this._apply(\"primExpr\");return this._or((function(){return (function(){this._apply(\"spacesNoNl\");this._applyWithArgs(\"token\",\"++\");return [\"postop\",\"++\",p]}).call(this)}),(function(){return (function(){this._apply(\"spacesNoNl\");this._applyWithArgs(\"token\",\"--\");return [\"postop\",\"--\",p]}).call(this)}),(function(){return (function(){this._apply(\"empty\");return p}).call(this)}))}).call(this)},\n\"primExpr\":function(){var $elf=this,_fromIdx=this.input.idx,p,i,m,as,f;return this._or((function(){return (function(){p=this._apply(\"primExpr\");return this._or((function(){return (function(){this._applyWithArgs(\"token\",\"[\");i=this._apply(\"expr\");this._applyWithArgs(\"token\",\"]\");return [\"getp\",i,p]}).call(this)}),(function(){return (function(){this._applyWithArgs(\"token\",\".\");m=this._applyWithArgs(\"token\",\"name\");this._applyWithArgs(\"token\",\"(\");as=this._applyWithArgs(\"listOf\",\"expr\",\",\");this._applyWithArgs(\"token\",\")\");return [\"send\",m,p].concat(as)}).call(this)}),(function(){return (function(){this._applyWithArgs(\"token\",\".\");f=this._applyWithArgs(\"token\",\"name\");return [\"getp\",[\"string\",f],p]}).call(this)}),(function(){return (function(){this._applyWithArgs(\"token\",\"(\");as=this._applyWithArgs(\"listOf\",\"expr\",\",\");this._applyWithArgs(\"token\",\")\");return [\"call\",p].concat(as)}).call(this)}))}).call(this)}),(function(){return this._apply(\"primExprHd\")}))},\n\"primExprHd\":function(){var $elf=this,_fromIdx=this.input.idx,e,n,s,as,es;return this._or((function(){return (function(){this._applyWithArgs(\"token\",\"(\");e=this._apply(\"expr\");this._applyWithArgs(\"token\",\")\");return e}).call(this)}),(function(){return (function(){this._applyWithArgs(\"token\",\"this\");return [\"this\"]}).call(this)}),(function(){return (function(){n=this._applyWithArgs(\"token\",\"name\");return [\"get\",n]}).call(this)}),(function(){return (function(){n=this._applyWithArgs(\"token\",\"number\");return [\"number\",n]}).call(this)}),(function(){return (function(){s=this._applyWithArgs(\"token\",\"string\");return [\"string\",s]}).call(this)}),(function(){return (function(){this._applyWithArgs(\"token\",\"function\");return this._apply(\"funcRest\")}).call(this)}),(function(){return (function(){this._applyWithArgs(\"token\",\"new\");n=this._applyWithArgs(\"token\",\"name\");this._applyWithArgs(\"token\",\"(\");as=this._applyWithArgs(\"listOf\",\"expr\",\",\");this._applyWithArgs(\"token\",\")\");return [\"new\",n].concat(as)}).call(this)}),(function(){return (function(){this._applyWithArgs(\"token\",\"[\");es=this._applyWithArgs(\"listOf\",\"expr\",\",\");this._applyWithArgs(\"token\",\"]\");return [\"arr\"].concat(es)}).call(this)}),(function(){return this._apply(\"json\")}),(function(){return this._apply(\"re\")}))},\n\"json\":function(){var $elf=this,_fromIdx=this.input.idx,bs;return (function(){this._applyWithArgs(\"token\",\"{\");bs=this._applyWithArgs(\"listOf\",\"jsonBinding\",\",\");this._applyWithArgs(\"token\",\"}\");return [\"json\"].concat(bs)}).call(this)},\n\"jsonBinding\":function(){var $elf=this,_fromIdx=this.input.idx,n,v;return (function(){n=this._apply(\"jsonPropName\");this._applyWithArgs(\"token\",\":\");v=this._apply(\"expr\");return [\"binding\",n,v]}).call(this)},\n\"jsonPropName\":function(){var $elf=this,_fromIdx=this.input.idx;return this._or((function(){return this._applyWithArgs(\"token\",\"name\")}),(function(){return this._applyWithArgs(\"token\",\"number\")}),(function(){return this._applyWithArgs(\"token\",\"string\")}))},\n\"re\":function(){var $elf=this,_fromIdx=this.input.idx,x;return (function(){this._apply(\"spaces\");x=this._consumedBy((function(){return (function(){this._applyWithArgs(\"exactly\",\"/\");this._apply(\"reBody\");this._applyWithArgs(\"exactly\",\"/\");return this._many((function(){return this._apply(\"reFlag\")}))}).call(this)}));return [\"regExpr\",x]}).call(this)},\n\"reBody\":function(){var $elf=this,_fromIdx=this.input.idx;return (function(){this._apply(\"re1stChar\");return this._many((function(){return this._apply(\"reChar\")}))}).call(this)},\n\"re1stChar\":function(){var $elf=this,_fromIdx=this.input.idx;return this._or((function(){return (function(){this._not((function(){return (function(){switch(this._apply('anything')){case \"*\":return \"*\";case \"\\\\\":return \"\\\\\";case \"/\":return \"/\";case \"[\":return \"[\";default: throw fail}}).call(this)}));return this._apply(\"reNonTerm\")}).call(this)}),(function(){return this._apply(\"escapeChar\")}),(function(){return this._apply(\"reClass\")}))},\n\"reChar\":function(){var $elf=this,_fromIdx=this.input.idx;return this._or((function(){return this._apply(\"re1stChar\")}),(function(){return (function(){switch(this._apply('anything')){case \"*\":return \"*\";default: throw fail}}).call(this)}))},\n\"reNonTerm\":function(){var $elf=this,_fromIdx=this.input.idx;return (function(){this._not((function(){return (function(){switch(this._apply('anything')){case \"\\n\":return \"\\n\";case \"\\r\":return \"\\r\";default: throw fail}}).call(this)}));return this._apply(\"char\")}).call(this)},\n\"reClass\":function(){var $elf=this,_fromIdx=this.input.idx;return (function(){this._applyWithArgs(\"exactly\",\"[\");this._many((function(){return this._apply(\"reClassChar\")}));return this._applyWithArgs(\"exactly\",\"]\")}).call(this)},\n\"reClassChar\":function(){var $elf=this,_fromIdx=this.input.idx;return (function(){this._not((function(){return (function(){switch(this._apply('anything')){case \"[\":return \"[\";case \"]\":return \"]\";default: throw fail}}).call(this)}));return this._apply(\"reChar\")}).call(this)},\n\"reFlag\":function(){var $elf=this,_fromIdx=this.input.idx;return this._apply(\"nameFirst\")},\n\"formal\":function(){var $elf=this,_fromIdx=this.input.idx;return (function(){this._apply(\"spaces\");return this._applyWithArgs(\"token\",\"name\")}).call(this)},\n\"funcRest\":function(){var $elf=this,_fromIdx=this.input.idx,fs,body;return (function(){this._applyWithArgs(\"token\",\"(\");fs=this._applyWithArgs(\"listOf\",\"formal\",\",\");this._applyWithArgs(\"token\",\")\");this._applyWithArgs(\"token\",\"{\");body=this._apply(\"srcElems\");this._applyWithArgs(\"token\",\"}\");return [\"func\",fs,body]}).call(this)},\n\"sc\":function(){var $elf=this,_fromIdx=this.input.idx;return this._or((function(){return (function(){this._apply(\"spacesNoNl\");return this._or((function(){return (function(){switch(this._apply('anything')){case \"\\n\":return \"\\n\";default: throw fail}}).call(this)}),(function(){return this._lookahead((function(){return this._applyWithArgs(\"exactly\",\"}\")}))}),(function(){return this._apply(\"end\")}))}).call(this)}),(function(){return this._applyWithArgs(\"token\",\";\")}))},\n\"binding\":function(){var $elf=this,_fromIdx=this.input.idx,n,v;return (function(){n=this._applyWithArgs(\"token\",\"name\");v=this._or((function(){return (function(){this._applyWithArgs(\"token\",\"=\");return this._apply(\"expr\")}).call(this)}),(function(){return (function(){this._apply(\"empty\");return [\"get\",\"undefined\"]}).call(this)}));return [\"var\",n,v]}).call(this)},\n\"block\":function(){var $elf=this,_fromIdx=this.input.idx,ss;return (function(){this._applyWithArgs(\"token\",\"{\");ss=this._apply(\"srcElems\");this._applyWithArgs(\"token\",\"}\");return ss}).call(this)},\n\"stmt\":function(){var $elf=this,_fromIdx=this.input.idx,bs,c,t,f,s,i,u,n,v,e,cs,x;return this._or((function(){return this._apply(\"block\")}),(function(){return (function(){this._applyWithArgs(\"token\",\"var\");bs=this._applyWithArgs(\"listOf\",\"binding\",\",\");this._apply(\"sc\");return [\"begin\"].concat(bs)}).call(this)}),(function(){return (function(){this._applyWithArgs(\"token\",\"if\");this._applyWithArgs(\"token\",\"(\");c=this._apply(\"expr\");this._applyWithArgs(\"token\",\")\");t=this._apply(\"stmt\");f=this._or((function(){return (function(){this._applyWithArgs(\"token\",\"else\");return this._apply(\"stmt\")}).call(this)}),(function(){return (function(){this._apply(\"empty\");return [\"get\",\"undefined\"]}).call(this)}));return [\"if\",c,t,f]}).call(this)}),(function(){return (function(){this._applyWithArgs(\"token\",\"while\");this._applyWithArgs(\"token\",\"(\");c=this._apply(\"expr\");this._applyWithArgs(\"token\",\")\");s=this._apply(\"stmt\");return [\"while\",c,s]}).call(this)}),(function(){return (function(){this._applyWithArgs(\"token\",\"do\");s=this._apply(\"stmt\");this._applyWithArgs(\"token\",\"while\");this._applyWithArgs(\"token\",\"(\");c=this._apply(\"expr\");this._applyWithArgs(\"token\",\")\");this._apply(\"sc\");return [\"doWhile\",s,c]}).call(this)}),(function(){return (function(){this._applyWithArgs(\"token\",\"for\");this._applyWithArgs(\"token\",\"(\");i=this._or((function(){return (function(){this._applyWithArgs(\"token\",\"var\");return this._apply(\"binding\")}).call(this)}),(function(){return this._apply(\"expr\")}),(function(){return (function(){this._apply(\"empty\");return [\"get\",\"undefined\"]}).call(this)}));this._applyWithArgs(\"token\",\";\");c=this._or((function(){return this._apply(\"expr\")}),(function(){return (function(){this._apply(\"empty\");return [\"get\",\"true\"]}).call(this)}));this._applyWithArgs(\"token\",\";\");u=this._or((function(){return this._apply(\"expr\")}),(function(){return (function(){this._apply(\"empty\");return [\"get\",\"undefined\"]}).call(this)}));this._applyWithArgs(\"token\",\")\");s=this._apply(\"stmt\");return [\"for\",i,c,u,s]}).call(this)}),(function(){return (function(){this._applyWithArgs(\"token\",\"for\");this._applyWithArgs(\"token\",\"(\");v=this._or((function(){return (function(){this._applyWithArgs(\"token\",\"var\");n=this._applyWithArgs(\"token\",\"name\");return [\"var\",n,[\"get\",\"undefined\"]]}).call(this)}),(function(){return this._apply(\"expr\")}));this._applyWithArgs(\"token\",\"in\");e=this._apply(\"expr\");this._applyWithArgs(\"token\",\")\");s=this._apply(\"stmt\");return [\"forIn\",v,e,s]}).call(this)}),(function(){return (function(){this._applyWithArgs(\"token\",\"switch\");this._applyWithArgs(\"token\",\"(\");e=this._apply(\"expr\");this._applyWithArgs(\"token\",\")\");this._applyWithArgs(\"token\",\"{\");cs=this._many((function(){return this._or((function(){return (function(){this._applyWithArgs(\"token\",\"case\");c=this._apply(\"expr\");this._applyWithArgs(\"token\",\":\");cs=this._apply(\"srcElems\");return [\"case\",c,cs]}).call(this)}),(function(){return (function(){this._applyWithArgs(\"token\",\"default\");this._applyWithArgs(\"token\",\":\");cs=this._apply(\"srcElems\");return [\"default\",cs]}).call(this)}))}));this._applyWithArgs(\"token\",\"}\");return [\"switch\",e].concat(cs)}).call(this)}),(function(){return (function(){this._applyWithArgs(\"token\",\"break\");this._apply(\"sc\");return [\"break\"]}).call(this)}),(function(){return (function(){this._applyWithArgs(\"token\",\"continue\");this._apply(\"sc\");return [\"continue\"]}).call(this)}),(function(){return (function(){this._applyWithArgs(\"token\",\"throw\");this._apply(\"spacesNoNl\");e=this._apply(\"expr\");this._apply(\"sc\");return [\"throw\",e]}).call(this)}),(function(){return (function(){this._applyWithArgs(\"token\",\"try\");t=this._apply(\"block\");this._applyWithArgs(\"token\",\"catch\");this._applyWithArgs(\"token\",\"(\");e=this._applyWithArgs(\"token\",\"name\");this._applyWithArgs(\"token\",\")\");c=this._apply(\"block\");f=this._or((function(){return (function(){this._applyWithArgs(\"token\",\"finally\");return this._apply(\"block\")}).call(this)}),(function(){return (function(){this._apply(\"empty\");return [\"get\",\"undefined\"]}).call(this)}));return [\"try\",t,e,c,f]}).call(this)}),(function(){return (function(){this._applyWithArgs(\"token\",\"return\");e=this._or((function(){return this._apply(\"expr\")}),(function(){return (function(){this._apply(\"empty\");return [\"get\",\"undefined\"]}).call(this)}));this._apply(\"sc\");return [\"return\",e]}).call(this)}),(function(){return (function(){this._applyWithArgs(\"token\",\"with\");this._applyWithArgs(\"token\",\"(\");x=this._apply(\"expr\");this._applyWithArgs(\"token\",\")\");s=this._apply(\"stmt\");return [\"with\",x,s]}).call(this)}),(function(){return (function(){e=this._apply(\"expr\");this._apply(\"sc\");return e}).call(this)}),(function(){return (function(){this._applyWithArgs(\"token\",\";\");return [\"get\",\"undefined\"]}).call(this)}))},\n\"srcElem\":function(){var $elf=this,_fromIdx=this.input.idx,n,f;return this._or((function(){return (function(){this._applyWithArgs(\"token\",\"function\");n=this._applyWithArgs(\"token\",\"name\");f=this._apply(\"funcRest\");return [\"var\",n,f]}).call(this)}),(function(){return this._apply(\"stmt\")}))},\n\"srcElems\":function(){var $elf=this,_fromIdx=this.input.idx,ss;return (function(){ss=this._many((function(){return this._apply(\"srcElem\")}));return [\"begin\"].concat(ss)}).call(this)},\n\"topLevel\":function(){var $elf=this,_fromIdx=this.input.idx,r;return (function(){r=this._apply(\"srcElems\");this._apply(\"spaces\");this._apply(\"end\");return r}).call(this)}});(BSJSParser[\"hexDigits\"]=\"0123456789abcdef\");(BSJSParser[\"keywords\"]=({}));(keywords=[\"break\",\"case\",\"catch\",\"continue\",\"default\",\"delete\",\"do\",\"else\",\"finally\",\"for\",\"function\",\"if\",\"in\",\"instanceof\",\"new\",\"return\",\"switch\",\"this\",\"throw\",\"try\",\"typeof\",\"var\",\"void\",\"while\",\"with\",\"ometa\"]);for(var idx=(0);(idx < keywords[\"length\"]);idx++){(BSJSParser[\"keywords\"][keywords[idx]]=true)}(BSJSParser[\"_isKeyword\"]=(function (k){return this[\"keywords\"].hasOwnProperty(k)}));BSSemActionParser=objectThatDelegatesTo(BSJSParser,{\n\"curlySemAction\":function(){var $elf=this,_fromIdx=this.input.idx,r,s,ss;return this._or((function(){return (function(){this._applyWithArgs(\"token\",\"{\");r=this._apply(\"expr\");this._apply(\"sc\");this._applyWithArgs(\"token\",\"}\");this._apply(\"spaces\");return r}).call(this)}),(function(){return (function(){this._applyWithArgs(\"token\",\"{\");ss=this._many((function(){return (function(){s=this._apply(\"srcElem\");this._lookahead((function(){return this._apply(\"srcElem\")}));return s}).call(this)}));s=this._or((function(){return (function(){r=this._apply(\"expr\");this._apply(\"sc\");return [\"return\",r]}).call(this)}),(function(){return this._apply(\"srcElem\")}));ss.push(s);this._applyWithArgs(\"token\",\"}\");this._apply(\"spaces\");return [\"send\",\"call\",[\"func\",[],[\"begin\"].concat(ss)],[\"this\"]]}).call(this)}))},\n\"semAction\":function(){var $elf=this,_fromIdx=this.input.idx,r;return this._or((function(){return this._apply(\"curlySemAction\")}),(function(){return (function(){r=this._apply(\"primExpr\");this._apply(\"spaces\");return r}).call(this)}))}});BSJSTranslator=objectThatDelegatesTo(OMeta,{\n\"trans\":function(){var $elf=this,_fromIdx=this.input.idx,t,ans;return (function(){this._form((function(){return (function(){t=this._apply(\"anything\");return ans=this._applyWithArgs(\"apply\",t)}).call(this)}));return ans}).call(this)},\n\"curlyTrans\":function(){var $elf=this,_fromIdx=this.input.idx,r,rs;return this._or((function(){return (function(){this._form((function(){return (function(){this._applyWithArgs(\"exactly\",\"begin\");return r=this._apply(\"curlyTrans\")}).call(this)}));return r}).call(this)}),(function(){return (function(){this._form((function(){return (function(){this._applyWithArgs(\"exactly\",\"begin\");return rs=this._many((function(){return this._apply(\"trans\")}))}).call(this)}));return ((\"{\" + rs.join(\";\")) + \"}\")}).call(this)}),(function(){return (function(){r=this._apply(\"trans\");return ((\"{\" + r) + \"}\")}).call(this)}))},\n\"this\":function(){var $elf=this,_fromIdx=this.input.idx;return \"this\"},\n\"break\":function(){var $elf=this,_fromIdx=this.input.idx;return \"break\"},\n\"continue\":function(){var $elf=this,_fromIdx=this.input.idx;return \"continue\"},\n\"number\":function(){var $elf=this,_fromIdx=this.input.idx,n;return (function(){n=this._apply(\"anything\");return ((\"(\" + n) + \")\")}).call(this)},\n\"string\":function(){var $elf=this,_fromIdx=this.input.idx,s;return (function(){s=this._apply(\"anything\");return s.toProgramString()}).call(this)},\n\"regExpr\":function(){var $elf=this,_fromIdx=this.input.idx,x;return (function(){x=this._apply(\"anything\");return x}).call(this)},\n\"arr\":function(){var $elf=this,_fromIdx=this.input.idx,xs;return (function(){xs=this._many((function(){return this._apply(\"trans\")}));return ((\"[\" + xs.join(\",\")) + \"]\")}).call(this)},\n\"unop\":function(){var $elf=this,_fromIdx=this.input.idx,op,x;return (function(){op=this._apply(\"anything\");x=this._apply(\"trans\");return ((((\"(\" + op) + \" \") + x) + \")\")}).call(this)},\n\"getp\":function(){var $elf=this,_fromIdx=this.input.idx,fd,x;return (function(){fd=this._apply(\"trans\");x=this._apply(\"trans\");return (((x + \"[\") + fd) + \"]\")}).call(this)},\n\"get\":function(){var $elf=this,_fromIdx=this.input.idx,x;return (function(){x=this._apply(\"anything\");return x}).call(this)},\n\"set\":function(){var $elf=this,_fromIdx=this.input.idx,lhs,rhs;return (function(){lhs=this._apply(\"trans\");rhs=this._apply(\"trans\");return ((((\"(\" + lhs) + \"=\") + rhs) + \")\")}).call(this)},\n\"mset\":function(){var $elf=this,_fromIdx=this.input.idx,lhs,op,rhs;return (function(){lhs=this._apply(\"trans\");op=this._apply(\"anything\");rhs=this._apply(\"trans\");return (((((\"(\" + lhs) + op) + \"=\") + rhs) + \")\")}).call(this)},\n\"binop\":function(){var $elf=this,_fromIdx=this.input.idx,op,x,y;return (function(){op=this._apply(\"anything\");x=this._apply(\"trans\");y=this._apply(\"trans\");return ((((((\"(\" + x) + \" \") + op) + \" \") + y) + \")\")}).call(this)},\n\"preop\":function(){var $elf=this,_fromIdx=this.input.idx,op,x;return (function(){op=this._apply(\"anything\");x=this._apply(\"trans\");return (op + x)}).call(this)},\n\"postop\":function(){var $elf=this,_fromIdx=this.input.idx,op,x;return (function(){op=this._apply(\"anything\");x=this._apply(\"trans\");return (x + op)}).call(this)},\n\"return\":function(){var $elf=this,_fromIdx=this.input.idx,x;return (function(){x=this._apply(\"trans\");return (\"return \" + x)}).call(this)},\n\"with\":function(){var $elf=this,_fromIdx=this.input.idx,x,s;return (function(){x=this._apply(\"trans\");s=this._apply(\"curlyTrans\");return (((\"with(\" + x) + \")\") + s)}).call(this)},\n\"if\":function(){var $elf=this,_fromIdx=this.input.idx,cond,t,e;return (function(){cond=this._apply(\"trans\");t=this._apply(\"curlyTrans\");e=this._apply(\"curlyTrans\");return (((((\"if(\" + cond) + \")\") + t) + \"else\") + e)}).call(this)},\n\"condExpr\":function(){var $elf=this,_fromIdx=this.input.idx,cond,t,e;return (function(){cond=this._apply(\"trans\");t=this._apply(\"trans\");e=this._apply(\"trans\");return ((((((\"(\" + cond) + \"?\") + t) + \":\") + e) + \")\")}).call(this)},\n\"while\":function(){var $elf=this,_fromIdx=this.input.idx,cond,body;return (function(){cond=this._apply(\"trans\");body=this._apply(\"curlyTrans\");return (((\"while(\" + cond) + \")\") + body)}).call(this)},\n\"doWhile\":function(){var $elf=this,_fromIdx=this.input.idx,body,cond;return (function(){body=this._apply(\"curlyTrans\");cond=this._apply(\"trans\");return ((((\"do\" + body) + \"while(\") + cond) + \")\")}).call(this)},\n\"for\":function(){var $elf=this,_fromIdx=this.input.idx,init,cond,upd,body;return (function(){init=this._apply(\"trans\");cond=this._apply(\"trans\");upd=this._apply(\"trans\");body=this._apply(\"curlyTrans\");return (((((((\"for(\" + init) + \";\") + cond) + \";\") + upd) + \")\") + body)}).call(this)},\n\"forIn\":function(){var $elf=this,_fromIdx=this.input.idx,x,arr,body;return (function(){x=this._apply(\"trans\");arr=this._apply(\"trans\");body=this._apply(\"curlyTrans\");return (((((\"for(\" + x) + \" in \") + arr) + \")\") + body)}).call(this)},\n\"begin\":function(){var $elf=this,_fromIdx=this.input.idx,x,xs;return this._or((function(){return (function(){x=this._apply(\"trans\");this._apply(\"end\");return x}).call(this)}),(function(){return (function(){xs=this._many((function(){return (function(){x=this._apply(\"trans\");return this._or((function(){return (function(){this._or((function(){return this._pred((x[(x[\"length\"] - (1))] == \"}\"))}),(function(){return this._apply(\"end\")}));return x}).call(this)}),(function(){return (function(){this._apply(\"empty\");return (x + \";\")}).call(this)}))}).call(this)}));return ((\"{\" + xs.join(\"\")) + \"}\")}).call(this)}))},\n\"func\":function(){var $elf=this,_fromIdx=this.input.idx,args,body;return (function(){args=this._apply(\"anything\");body=this._apply(\"curlyTrans\");return ((((\"(function (\" + args.join(\",\")) + \")\") + body) + \")\")}).call(this)},\n\"call\":function(){var $elf=this,_fromIdx=this.input.idx,fn,args;return (function(){fn=this._apply(\"trans\");args=this._many((function(){return this._apply(\"trans\")}));return (((fn + \"(\") + args.join(\",\")) + \")\")}).call(this)},\n\"send\":function(){var $elf=this,_fromIdx=this.input.idx,msg,recv,args;return (function(){msg=this._apply(\"anything\");recv=this._apply(\"trans\");args=this._many((function(){return this._apply(\"trans\")}));return (((((recv + \".\") + msg) + \"(\") + args.join(\",\")) + \")\")}).call(this)},\n\"new\":function(){var $elf=this,_fromIdx=this.input.idx,cls,args;return (function(){cls=this._apply(\"anything\");args=this._many((function(){return this._apply(\"trans\")}));return ((((\"new \" + cls) + \"(\") + args.join(\",\")) + \")\")}).call(this)},\n\"var\":function(){var $elf=this,_fromIdx=this.input.idx,name,val;return (function(){name=this._apply(\"anything\");val=this._apply(\"trans\");return (((\"var \" + name) + \"=\") + val)}).call(this)},\n\"throw\":function(){var $elf=this,_fromIdx=this.input.idx,x;return (function(){x=this._apply(\"trans\");return (\"throw \" + x)}).call(this)},\n\"try\":function(){var $elf=this,_fromIdx=this.input.idx,x,name,c,f;return (function(){x=this._apply(\"curlyTrans\");name=this._apply(\"anything\");c=this._apply(\"curlyTrans\");f=this._apply(\"curlyTrans\");return (((((((\"try \" + x) + \"catch(\") + name) + \")\") + c) + \"finally\") + f)}).call(this)},\n\"json\":function(){var $elf=this,_fromIdx=this.input.idx,props;return (function(){props=this._many((function(){return this._apply(\"trans\")}));return ((\"({\" + props.join(\",\")) + \"})\")}).call(this)},\n\"binding\":function(){var $elf=this,_fromIdx=this.input.idx,name,val;return (function(){name=this._apply(\"anything\");val=this._apply(\"trans\");return ((name.toProgramString() + \": \") + val)}).call(this)},\n\"switch\":function(){var $elf=this,_fromIdx=this.input.idx,x,cases;return (function(){x=this._apply(\"trans\");cases=this._many((function(){return this._apply(\"trans\")}));return ((((\"switch(\" + x) + \"){\") + cases.join(\";\")) + \"}\")}).call(this)},\n\"case\":function(){var $elf=this,_fromIdx=this.input.idx,x,y;return (function(){x=this._apply(\"trans\");y=this._apply(\"trans\");return (((\"case \" + x) + \": \") + y)}).call(this)},\n\"default\":function(){var $elf=this,_fromIdx=this.input.idx,y;return (function(){y=this._apply(\"trans\");return (\"default: \" + y)}).call(this)}})}"},
	{"name": "OMeta Compiler",
	 "language": "ometa parser",
	 "editor": {"name": "ACE", "height": "300px", "gutters": true},
	 "contents": "ometa BSOMetaParser {\n  space          = ^space | fromTo('//', '\\n') | fromTo('/*', '*/'),\n  nameFirst      = '_' | '$' | letter,\n  nameRest       = nameFirst | digit,\n  tsName         = <nameFirst nameRest*>,\n  name           = spaces tsName,\n  hexDigit       = char:x {this.hexDigits.indexOf(x.toLowerCase())}:v\n                                                             ?(v >= 0) -> v,\n  eChar          = <'\\\\' ( 'u' hexDigit hexDigit hexDigit hexDigit\n                         | 'x' hexDigit hexDigit\n                         | char                                   )>:s -> unescape(s)\n                 | char,\n  tsString       = '\\'' (~'\\'' eChar)*:xs '\\''                         -> xs.join(''),\n  characters     = '`' '`' (~('\\'' '\\'') eChar)*:xs '\\'' '\\''          -> [#App, #seq,     xs.join('').toProgramString()],\n  sCharacters    = '\"'     (~'\"'         eChar)*:xs '\"'                -> [#App, #token,   xs.join('').toProgramString()],\n  string         = (('#' | '`') tsName | tsString):xs                  -> [#App, #exactly, xs.toProgramString()],\n  number         = <'-'? digit+>:n                                     -> [#App, #exactly, n],\n  keyword :xs    = token(xs) ~letterOrDigit                            -> xs,\n  args           = '(' listOf(#hostExpr, ','):xs \")\"                   -> xs\n                 | empty                                               -> [],\n  application    = \"^\"          name:rule args:as                      -> [#App, \"super\",        \"'\" + rule + \"'\"].concat(as)\n                 | name:grm \".\" name:rule args:as                      -> [#App, \"foreign\", grm, \"'\" + rule + \"'\"].concat(as)\n                 |              name:rule args:as                      -> [#App, rule].concat(as),\n  hostExpr       = BSSemActionParser.expr:r                               BSJSTranslator.trans(r),\n  curlyHostExpr  = BSSemActionParser.curlySemAction:r                     BSJSTranslator.trans(r),\n  primHostExpr   = BSSemActionParser.semAction:r                          BSJSTranslator.trans(r),\n  atomicHostExpr = curlyHostExpr | primHostExpr,\n  semAction      = curlyHostExpr:x                                     -> [#Act, x]\n                 | \"!\"  atomicHostExpr:x                               -> [#Act, x],\n  arrSemAction   = \"->\" atomicHostExpr:x                               -> [#Act, x],\n  semPred        = \"?\"  atomicHostExpr:x                               -> [#Pred, x],\n  expr           = expr5(true):x (\"|\"  expr5(true))+:xs                -> [#Or,  x].concat(xs)\n                 | expr5(true):x (\"||\" expr5(true))+:xs                -> [#XOr, x].concat(xs)\n                 | expr5(false),\n  expr5 :ne      = interleavePart:x (\"&&\" interleavePart)+:xs          -> [#Interleave, x].concat(xs)\n                 | expr4(ne),\n  interleavePart = \"(\" expr4(true):part \")\"                            -> [\"1\", part]\n                 | expr4(true):part modedIPart(part),\n  modedIPart     = [#And [#Many  :part]]                               -> [\"*\", part]\n                 | [#And [#Many1 :part]]                               -> [\"+\", part]\n                 | [#And [#Opt   :part]]                               -> [\"?\", part]\n                 | :part                                               -> [\"1\", part],\n  expr4 :ne      =                expr3*:xs arrSemAction:act           -> [#And].concat(xs).concat([act])\n                 | ?ne            expr3+:xs                            -> [#And].concat(xs)\n                 | ?(ne == false) expr3*:xs                            -> [#And].concat(xs),\n  optIter :x     = '*'                                                 -> [#Many,  x]\n                 | '+'                                                 -> [#Many1, x]\n                 | '?'                                                 -> [#Opt,   x]\n                 | empty                                               -> x,\n  optBind :x     = ':' name:n                                          -> { this.locals[n] = true; [#Set, n, x] }\n                 | empty                                               -> x,\n  expr3          = \":\" name:n                                          -> { this.locals[n] = true; [#Set, n, [#App, #anything]] }\n                 | (expr2:x optIter(x) | semAction):e optBind(e)\n                 | semPred,\n  expr2          = \"~\" expr2:x                                         -> [#Not,       x]\n                 | \"&\" expr1:x                                         -> [#Lookahead, x]\n                 | expr1,\n  expr1          = application \n                 | ( keyword('undefined') | keyword('nil')\n                   | keyword('true')      | keyword('false') ):x       -> [#App, #exactly, x]\n                 | spaces (characters | sCharacters | string | number)\n                 | \"[\"  expr:x \"]\"                                     -> [#Form,      x]\n                 | \"<\"  expr:x \">\"                                     -> [#ConsBy,    x]\n                 | \"@<\" expr:x \">\"                                     -> [#IdxConsBy, x]\n                 | \"(\"  expr:x \")\"                                     -> x,\n  ruleName       = name\n                 | spaces tsString,\n  rule           = &(ruleName:n) !(this.locals = {'$elf=this': true, '_fromIdx=this.input.idx': true})\n                     rulePart(n):x (\",\" rulePart(n))*:xs               -> [#Rule, n, ownPropertyNames(this.locals),\n                                                                            [#Or, x].concat(xs)],\n  rulePart :rn   = ruleName:n ?(n == rn) expr4(false):b1 ( \"=\" expr:b2 -> [#And, b1, b2]\n                                                         | empty       -> b1\n                                                         ),\n  grammar        = keyword('ometa') name:n\n                     ( \"<:\" name | empty -> 'OMeta' ):sn\n                     \"{\" listOf(#rule, ','):rs \"}\"                        BSOMetaOptimizer.optimizeGrammar(\n                                                                            [#Grammar, n, sn].concat(rs)\n                                                                          )\n}\nBSOMetaParser.hexDigits = \"0123456789abcdef\"\n\n// By dispatching on the head of a list, the following idiom allows translators to avoid doing a linear search.\n// (Note that the \"=\" in a rule definition is optional, so you can give your rules an \"ML feel\".)\nometa BSOMetaTranslator {\n  App        'super' anything+:args        -> [this.sName, '._superApplyWithArgs(this,', args.join(','), ')']      .join(''),\n  App        :rule   anything+:args        -> ['this._applyWithArgs(\"', rule, '\",',      args.join(','), ')']      .join(''),\n  App        :rule                         -> ['this._apply(\"', rule, '\")']                                        .join(''),\n  Act        :expr                         -> expr,\n  Pred       :expr                         -> ['this._pred(', expr, ')']                                           .join(''),\n  Or         transFn*:xs                   -> ['this._or(',  xs.join(','), ')']                                    .join(''),\n  XOr        transFn*:xs                       {xs.unshift((this.name + \".\" + this.rName).toProgramString())}\n                                           -> ['this._xor(', xs.join(','), ')']                                    .join(''),\n  And        notLast(#trans)*:xs trans:y\n             {xs.push('return ' + y)}      -> ['(function(){', xs.join(';'), '}).call(this)']                      .join(''),\n  And                                      -> 'undefined',\n  Opt        transFn:x                     -> ['this._opt(',           x, ')']                                     .join(''),\n  Many       transFn:x                     -> ['this._many(',          x, ')']                                     .join(''),\n  Many1      transFn:x                     -> ['this._many1(',         x, ')']                                     .join(''),\n  Set        :n trans:v                    -> [n, '=', v]                                                          .join(''),\n  Not        transFn:x                     -> ['this._not(',           x, ')']                                     .join(''),\n  Lookahead  transFn:x                     -> ['this._lookahead(',     x, ')']                                     .join(''),\n  Form       transFn:x                     -> ['this._form(',          x, ')']                                     .join(''),\n  ConsBy     transFn:x                     -> ['this._consumedBy(',    x, ')']                                     .join(''),\n  IdxConsBy  transFn:x                     -> ['this._idxConsumedBy(', x, ')']                                     .join(''),\n  JumpTable  jtCase*:cases                 -> this.jumpTableCode(cases),\n  Interleave intPart*:xs                   -> ['this._interleave(', xs.join(','), ')']                             .join(''),\n  \n  Rule       :name {this.rName = name}\n             locals:ls trans:body          -> ['\\n\"', name, '\":function(){', ls, 'return ', body, '}']             .join(''),\n  Grammar    :name :sName\n             {this.name = name}\n             {this.sName = sName}\n             trans*:rules                  -> [name, '=objectThatDelegatesTo(', sName, ',{', rules.join(','), '})'].join(''),\n  intPart  = [:mode transFn:part]          -> (mode.toProgramString()  + \",\" + part),\n  jtCase   = [:x trans:e]                  -> [x.toProgramString(), e],\n  locals   = [string+:vs]                  -> ['var ', vs.join(','), ';']                                          .join('')\n           | []                            -> '',\n  trans    = [:t apply(t):ans]             -> ans,\n  transFn  = trans:x                       -> ['(function(){return ', x, '})']                                     .join('')\n}\nBSOMetaTranslator.jumpTableCode = function(cases) {\n  var buf = new StringBuffer()\n  buf.nextPutAll(\"(function(){switch(this._apply('anything')){\")\n  for (var i = 0; i < cases.length; i += 1)\n    buf.nextPutAll(\"case \" + cases[i][0] + \":return \" + cases[i][1] + \";\")\n  buf.nextPutAll(\"default: throw fail}}).call(this)\")\n  return buf.contents()\n}"},
	{"name": "OMeta code",
	 "language": "Javascript code",
	 "inputView": "OMeta Compiler",
	 "editor": {"name": "ACE", "height": "300px", "gutters": true, "readOnly": true},
	 "contents": "{BSOMetaParser=objectThatDelegatesTo(OMeta,{\n\"space\":function(){var $elf=this,_fromIdx=this.input.idx;return this._or((function(){return OMeta._superApplyWithArgs(this,'space')}),(function(){return this._applyWithArgs(\"fromTo\",\"//\",\"\\n\")}),(function(){return this._applyWithArgs(\"fromTo\",\"/*\",\"*/\")}))},\n\"nameFirst\":function(){var $elf=this,_fromIdx=this.input.idx;return this._or((function(){return (function(){switch(this._apply('anything')){case \"_\":return \"_\";case \"$\":return \"$\";default: throw fail}}).call(this)}),(function(){return this._apply(\"letter\")}))},\n\"nameRest\":function(){var $elf=this,_fromIdx=this.input.idx;return this._or((function(){return this._apply(\"nameFirst\")}),(function(){return this._apply(\"digit\")}))},\n\"tsName\":function(){var $elf=this,_fromIdx=this.input.idx;return this._consumedBy((function(){return (function(){this._apply(\"nameFirst\");return this._many((function(){return this._apply(\"nameRest\")}))}).call(this)}))},\n\"name\":function(){var $elf=this,_fromIdx=this.input.idx;return (function(){this._apply(\"spaces\");return this._apply(\"tsName\")}).call(this)},\n\"hexDigit\":function(){var $elf=this,_fromIdx=this.input.idx,x,v;return (function(){x=this._apply(\"char\");v=this[\"hexDigits\"].indexOf(x.toLowerCase());this._pred((v >= (0)));return v}).call(this)},\n\"eChar\":function(){var $elf=this,_fromIdx=this.input.idx,s;return this._or((function(){return (function(){s=this._consumedBy((function(){return (function(){this._applyWithArgs(\"exactly\",\"\\\\\");return this._or((function(){return (function(){switch(this._apply('anything')){case \"u\":return (function(){this._apply(\"hexDigit\");this._apply(\"hexDigit\");this._apply(\"hexDigit\");return this._apply(\"hexDigit\")}).call(this);case \"x\":return (function(){this._apply(\"hexDigit\");return this._apply(\"hexDigit\")}).call(this);default: throw fail}}).call(this)}),(function(){return this._apply(\"char\")}))}).call(this)}));return unescape(s)}).call(this)}),(function(){return this._apply(\"char\")}))},\n\"tsString\":function(){var $elf=this,_fromIdx=this.input.idx,xs;return (function(){this._applyWithArgs(\"exactly\",\"\\'\");xs=this._many((function(){return (function(){this._not((function(){return this._applyWithArgs(\"exactly\",\"\\'\")}));return this._apply(\"eChar\")}).call(this)}));this._applyWithArgs(\"exactly\",\"\\'\");return xs.join(\"\")}).call(this)},\n\"characters\":function(){var $elf=this,_fromIdx=this.input.idx,xs;return (function(){this._applyWithArgs(\"exactly\",\"`\");this._applyWithArgs(\"exactly\",\"`\");xs=this._many((function(){return (function(){this._not((function(){return (function(){this._applyWithArgs(\"exactly\",\"\\'\");return this._applyWithArgs(\"exactly\",\"\\'\")}).call(this)}));return this._apply(\"eChar\")}).call(this)}));this._applyWithArgs(\"exactly\",\"\\'\");this._applyWithArgs(\"exactly\",\"\\'\");return [\"App\",\"seq\",xs.join(\"\").toProgramString()]}).call(this)},\n\"sCharacters\":function(){var $elf=this,_fromIdx=this.input.idx,xs;return (function(){this._applyWithArgs(\"exactly\",\"\\\"\");xs=this._many((function(){return (function(){this._not((function(){return this._applyWithArgs(\"exactly\",\"\\\"\")}));return this._apply(\"eChar\")}).call(this)}));this._applyWithArgs(\"exactly\",\"\\\"\");return [\"App\",\"token\",xs.join(\"\").toProgramString()]}).call(this)},\n\"string\":function(){var $elf=this,_fromIdx=this.input.idx,xs;return (function(){xs=this._or((function(){return (function(){(function(){switch(this._apply('anything')){case \"#\":return \"#\";case \"`\":return \"`\";default: throw fail}}).call(this);return this._apply(\"tsName\")}).call(this)}),(function(){return this._apply(\"tsString\")}));return [\"App\",\"exactly\",xs.toProgramString()]}).call(this)},\n\"number\":function(){var $elf=this,_fromIdx=this.input.idx,n;return (function(){n=this._consumedBy((function(){return (function(){this._opt((function(){return this._applyWithArgs(\"exactly\",\"-\")}));return this._many1((function(){return this._apply(\"digit\")}))}).call(this)}));return [\"App\",\"exactly\",n]}).call(this)},\n\"keyword\":function(){var $elf=this,_fromIdx=this.input.idx,xs;return (function(){xs=this._apply(\"anything\");this._applyWithArgs(\"token\",xs);this._not((function(){return this._apply(\"letterOrDigit\")}));return xs}).call(this)},\n\"args\":function(){var $elf=this,_fromIdx=this.input.idx,xs;return this._or((function(){return (function(){switch(this._apply('anything')){case \"(\":return (function(){xs=this._applyWithArgs(\"listOf\",\"hostExpr\",\",\");this._applyWithArgs(\"token\",\")\");return xs}).call(this);default: throw fail}}).call(this)}),(function(){return (function(){this._apply(\"empty\");return []}).call(this)}))},\n\"application\":function(){var $elf=this,_fromIdx=this.input.idx,rule,as,grm;return this._or((function(){return (function(){this._applyWithArgs(\"token\",\"^\");rule=this._apply(\"name\");as=this._apply(\"args\");return [\"App\",\"super\",((\"\\'\" + rule) + \"\\'\")].concat(as)}).call(this)}),(function(){return (function(){grm=this._apply(\"name\");this._applyWithArgs(\"token\",\".\");rule=this._apply(\"name\");as=this._apply(\"args\");return [\"App\",\"foreign\",grm,((\"\\'\" + rule) + \"\\'\")].concat(as)}).call(this)}),(function(){return (function(){rule=this._apply(\"name\");as=this._apply(\"args\");return [\"App\",rule].concat(as)}).call(this)}))},\n\"hostExpr\":function(){var $elf=this,_fromIdx=this.input.idx,r;return (function(){r=this._applyWithArgs(\"foreign\",BSSemActionParser,'expr');return this._applyWithArgs(\"foreign\",BSJSTranslator,'trans',r)}).call(this)},\n\"curlyHostExpr\":function(){var $elf=this,_fromIdx=this.input.idx,r;return (function(){r=this._applyWithArgs(\"foreign\",BSSemActionParser,'curlySemAction');return this._applyWithArgs(\"foreign\",BSJSTranslator,'trans',r)}).call(this)},\n\"primHostExpr\":function(){var $elf=this,_fromIdx=this.input.idx,r;return (function(){r=this._applyWithArgs(\"foreign\",BSSemActionParser,'semAction');return this._applyWithArgs(\"foreign\",BSJSTranslator,'trans',r)}).call(this)},\n\"atomicHostExpr\":function(){var $elf=this,_fromIdx=this.input.idx;return this._or((function(){return this._apply(\"curlyHostExpr\")}),(function(){return this._apply(\"primHostExpr\")}))},\n\"semAction\":function(){var $elf=this,_fromIdx=this.input.idx,x;return this._or((function(){return (function(){x=this._apply(\"curlyHostExpr\");return [\"Act\",x]}).call(this)}),(function(){return (function(){this._applyWithArgs(\"token\",\"!\");x=this._apply(\"atomicHostExpr\");return [\"Act\",x]}).call(this)}))},\n\"arrSemAction\":function(){var $elf=this,_fromIdx=this.input.idx,x;return (function(){this._applyWithArgs(\"token\",\"->\");x=this._apply(\"atomicHostExpr\");return [\"Act\",x]}).call(this)},\n\"semPred\":function(){var $elf=this,_fromIdx=this.input.idx,x;return (function(){this._applyWithArgs(\"token\",\"?\");x=this._apply(\"atomicHostExpr\");return [\"Pred\",x]}).call(this)},\n\"expr\":function(){var $elf=this,_fromIdx=this.input.idx,x,xs;return this._or((function(){return (function(){x=this._applyWithArgs(\"expr5\",true);xs=this._many1((function(){return (function(){this._applyWithArgs(\"token\",\"|\");return this._applyWithArgs(\"expr5\",true)}).call(this)}));return [\"Or\",x].concat(xs)}).call(this)}),(function(){return (function(){x=this._applyWithArgs(\"expr5\",true);xs=this._many1((function(){return (function(){this._applyWithArgs(\"token\",\"||\");return this._applyWithArgs(\"expr5\",true)}).call(this)}));return [\"XOr\",x].concat(xs)}).call(this)}),(function(){return this._applyWithArgs(\"expr5\",false)}))},\n\"expr5\":function(){var $elf=this,_fromIdx=this.input.idx,ne,x,xs;return (function(){ne=this._apply(\"anything\");return this._or((function(){return (function(){x=this._apply(\"interleavePart\");xs=this._many1((function(){return (function(){this._applyWithArgs(\"token\",\"&&\");return this._apply(\"interleavePart\")}).call(this)}));return [\"Interleave\",x].concat(xs)}).call(this)}),(function(){return this._applyWithArgs(\"expr4\",ne)}))}).call(this)},\n\"interleavePart\":function(){var $elf=this,_fromIdx=this.input.idx,part;return this._or((function(){return (function(){this._applyWithArgs(\"token\",\"(\");part=this._applyWithArgs(\"expr4\",true);this._applyWithArgs(\"token\",\")\");return [\"1\",part]}).call(this)}),(function(){return (function(){part=this._applyWithArgs(\"expr4\",true);return this._applyWithArgs(\"modedIPart\",part)}).call(this)}))},\n\"modedIPart\":function(){var $elf=this,_fromIdx=this.input.idx,part;return this._or((function(){return (function(){this._form((function(){return (function(){this._applyWithArgs(\"exactly\",\"And\");return this._form((function(){return (function(){this._applyWithArgs(\"exactly\",\"Many\");return part=this._apply(\"anything\")}).call(this)}))}).call(this)}));return [\"*\",part]}).call(this)}),(function(){return (function(){this._form((function(){return (function(){this._applyWithArgs(\"exactly\",\"And\");return this._form((function(){return (function(){this._applyWithArgs(\"exactly\",\"Many1\");return part=this._apply(\"anything\")}).call(this)}))}).call(this)}));return [\"+\",part]}).call(this)}),(function(){return (function(){this._form((function(){return (function(){this._applyWithArgs(\"exactly\",\"And\");return this._form((function(){return (function(){this._applyWithArgs(\"exactly\",\"Opt\");return part=this._apply(\"anything\")}).call(this)}))}).call(this)}));return [\"?\",part]}).call(this)}),(function(){return (function(){part=this._apply(\"anything\");return [\"1\",part]}).call(this)}))},\n\"expr4\":function(){var $elf=this,_fromIdx=this.input.idx,ne,xs,act;return (function(){ne=this._apply(\"anything\");return this._or((function(){return (function(){xs=this._many((function(){return this._apply(\"expr3\")}));act=this._apply(\"arrSemAction\");return [\"And\"].concat(xs).concat([act])}).call(this)}),(function(){return (function(){this._pred(ne);xs=this._many1((function(){return this._apply(\"expr3\")}));return [\"And\"].concat(xs)}).call(this)}),(function(){return (function(){this._pred((ne == false));xs=this._many((function(){return this._apply(\"expr3\")}));return [\"And\"].concat(xs)}).call(this)}))}).call(this)},\n\"optIter\":function(){var $elf=this,_fromIdx=this.input.idx,x;return (function(){x=this._apply(\"anything\");return this._or((function(){return (function(){switch(this._apply('anything')){case \"*\":return [\"Many\",x];case \"+\":return [\"Many1\",x];case \"?\":return [\"Opt\",x];default: throw fail}}).call(this)}),(function(){return (function(){this._apply(\"empty\");return x}).call(this)}))}).call(this)},\n\"optBind\":function(){var $elf=this,_fromIdx=this.input.idx,x,n;return (function(){x=this._apply(\"anything\");return this._or((function(){return (function(){switch(this._apply('anything')){case \":\":return (function(){n=this._apply(\"name\");return (function (){(this[\"locals\"][n]=true);return [\"Set\",n,x]}).call(this)}).call(this);default: throw fail}}).call(this)}),(function(){return (function(){this._apply(\"empty\");return x}).call(this)}))}).call(this)},\n\"expr3\":function(){var $elf=this,_fromIdx=this.input.idx,n,x,e;return this._or((function(){return (function(){this._applyWithArgs(\"token\",\":\");n=this._apply(\"name\");return (function (){(this[\"locals\"][n]=true);return [\"Set\",n,[\"App\",\"anything\"]]}).call(this)}).call(this)}),(function(){return (function(){e=this._or((function(){return (function(){x=this._apply(\"expr2\");return this._applyWithArgs(\"optIter\",x)}).call(this)}),(function(){return this._apply(\"semAction\")}));return this._applyWithArgs(\"optBind\",e)}).call(this)}),(function(){return this._apply(\"semPred\")}))},\n\"expr2\":function(){var $elf=this,_fromIdx=this.input.idx,x;return this._or((function(){return (function(){this._applyWithArgs(\"token\",\"~\");x=this._apply(\"expr2\");return [\"Not\",x]}).call(this)}),(function(){return (function(){this._applyWithArgs(\"token\",\"&\");x=this._apply(\"expr1\");return [\"Lookahead\",x]}).call(this)}),(function(){return this._apply(\"expr1\")}))},\n\"expr1\":function(){var $elf=this,_fromIdx=this.input.idx,x;return this._or((function(){return this._apply(\"application\")}),(function(){return (function(){x=this._or((function(){return this._applyWithArgs(\"keyword\",\"undefined\")}),(function(){return this._applyWithArgs(\"keyword\",\"nil\")}),(function(){return this._applyWithArgs(\"keyword\",\"true\")}),(function(){return this._applyWithArgs(\"keyword\",\"false\")}));return [\"App\",\"exactly\",x]}).call(this)}),(function(){return (function(){this._apply(\"spaces\");return this._or((function(){return this._apply(\"characters\")}),(function(){return this._apply(\"sCharacters\")}),(function(){return this._apply(\"string\")}),(function(){return this._apply(\"number\")}))}).call(this)}),(function(){return (function(){this._applyWithArgs(\"token\",\"[\");x=this._apply(\"expr\");this._applyWithArgs(\"token\",\"]\");return [\"Form\",x]}).call(this)}),(function(){return (function(){this._applyWithArgs(\"token\",\"<\");x=this._apply(\"expr\");this._applyWithArgs(\"token\",\">\");return [\"ConsBy\",x]}).call(this)}),(function(){return (function(){this._applyWithArgs(\"token\",\"@<\");x=this._apply(\"expr\");this._applyWithArgs(\"token\",\">\");return [\"IdxConsBy\",x]}).call(this)}),(function(){return (function(){this._applyWithArgs(\"token\",\"(\");x=this._apply(\"expr\");this._applyWithArgs(\"token\",\")\");return x}).call(this)}))},\n\"ruleName\":function(){var $elf=this,_fromIdx=this.input.idx;return this._or((function(){return this._apply(\"name\")}),(function(){return (function(){this._apply(\"spaces\");return this._apply(\"tsString\")}).call(this)}))},\n\"rule\":function(){var $elf=this,_fromIdx=this.input.idx,n,x,xs;return (function(){this._lookahead((function(){return n=this._apply(\"ruleName\")}));(this[\"locals\"]=({\"$elf=this\": true,\"_fromIdx=this.input.idx\": true}));x=this._applyWithArgs(\"rulePart\",n);xs=this._many((function(){return (function(){this._applyWithArgs(\"token\",\",\");return this._applyWithArgs(\"rulePart\",n)}).call(this)}));return [\"Rule\",n,ownPropertyNames(this[\"locals\"]),[\"Or\",x].concat(xs)]}).call(this)},\n\"rulePart\":function(){var $elf=this,_fromIdx=this.input.idx,rn,n,b1,b2;return (function(){rn=this._apply(\"anything\");n=this._apply(\"ruleName\");this._pred((n == rn));b1=this._applyWithArgs(\"expr4\",false);return this._or((function(){return (function(){this._applyWithArgs(\"token\",\"=\");b2=this._apply(\"expr\");return [\"And\",b1,b2]}).call(this)}),(function(){return (function(){this._apply(\"empty\");return b1}).call(this)}))}).call(this)},\n\"grammar\":function(){var $elf=this,_fromIdx=this.input.idx,n,sn,rs;return (function(){this._applyWithArgs(\"keyword\",\"ometa\");n=this._apply(\"name\");sn=this._or((function(){return (function(){this._applyWithArgs(\"token\",\"<:\");return this._apply(\"name\")}).call(this)}),(function(){return (function(){this._apply(\"empty\");return \"OMeta\"}).call(this)}));this._applyWithArgs(\"token\",\"{\");rs=this._applyWithArgs(\"listOf\",\"rule\",\",\");this._applyWithArgs(\"token\",\"}\");return this._applyWithArgs(\"foreign\",BSOMetaOptimizer,'optimizeGrammar',[\"Grammar\",n,sn].concat(rs))}).call(this)}});(BSOMetaParser[\"hexDigits\"]=\"0123456789abcdef\");BSOMetaTranslator=objectThatDelegatesTo(OMeta,{\n\"App\":function(){var $elf=this,_fromIdx=this.input.idx,args,rule;return this._or((function(){return (function(){switch(this._apply('anything')){case \"super\":return (function(){args=this._many1((function(){return this._apply(\"anything\")}));return [this[\"sName\"],\"._superApplyWithArgs(this,\",args.join(\",\"),\")\"].join(\"\")}).call(this);default: throw fail}}).call(this)}),(function(){return (function(){rule=this._apply(\"anything\");args=this._many1((function(){return this._apply(\"anything\")}));return [\"this._applyWithArgs(\\\"\",rule,\"\\\",\",args.join(\",\"),\")\"].join(\"\")}).call(this)}),(function(){return (function(){rule=this._apply(\"anything\");return [\"this._apply(\\\"\",rule,\"\\\")\"].join(\"\")}).call(this)}))},\n\"Act\":function(){var $elf=this,_fromIdx=this.input.idx,expr;return (function(){expr=this._apply(\"anything\");return expr}).call(this)},\n\"Pred\":function(){var $elf=this,_fromIdx=this.input.idx,expr;return (function(){expr=this._apply(\"anything\");return [\"this._pred(\",expr,\")\"].join(\"\")}).call(this)},\n\"Or\":function(){var $elf=this,_fromIdx=this.input.idx,xs;return (function(){xs=this._many((function(){return this._apply(\"transFn\")}));return [\"this._or(\",xs.join(\",\"),\")\"].join(\"\")}).call(this)},\n\"XOr\":function(){var $elf=this,_fromIdx=this.input.idx,xs;return (function(){xs=this._many((function(){return this._apply(\"transFn\")}));xs.unshift(((this[\"name\"] + \".\") + this[\"rName\"]).toProgramString());return [\"this._xor(\",xs.join(\",\"),\")\"].join(\"\")}).call(this)},\n\"And\":function(){var $elf=this,_fromIdx=this.input.idx,xs,y;return this._or((function(){return (function(){xs=this._many((function(){return this._applyWithArgs(\"notLast\",\"trans\")}));y=this._apply(\"trans\");xs.push((\"return \" + y));return [\"(function(){\",xs.join(\";\"),\"}).call(this)\"].join(\"\")}).call(this)}),(function(){return \"undefined\"}))},\n\"Opt\":function(){var $elf=this,_fromIdx=this.input.idx,x;return (function(){x=this._apply(\"transFn\");return [\"this._opt(\",x,\")\"].join(\"\")}).call(this)},\n\"Many\":function(){var $elf=this,_fromIdx=this.input.idx,x;return (function(){x=this._apply(\"transFn\");return [\"this._many(\",x,\")\"].join(\"\")}).call(this)},\n\"Many1\":function(){var $elf=this,_fromIdx=this.input.idx,x;return (function(){x=this._apply(\"transFn\");return [\"this._many1(\",x,\")\"].join(\"\")}).call(this)},\n\"Set\":function(){var $elf=this,_fromIdx=this.input.idx,n,v;return (function(){n=this._apply(\"anything\");v=this._apply(\"trans\");return [n,\"=\",v].join(\"\")}).call(this)},\n\"Not\":function(){var $elf=this,_fromIdx=this.input.idx,x;return (function(){x=this._apply(\"transFn\");return [\"this._not(\",x,\")\"].join(\"\")}).call(this)},\n\"Lookahead\":function(){var $elf=this,_fromIdx=this.input.idx,x;return (function(){x=this._apply(\"transFn\");return [\"this._lookahead(\",x,\")\"].join(\"\")}).call(this)},\n\"Form\":function(){var $elf=this,_fromIdx=this.input.idx,x;return (function(){x=this._apply(\"transFn\");return [\"this._form(\",x,\")\"].join(\"\")}).call(this)},\n\"ConsBy\":function(){var $elf=this,_fromIdx=this.input.idx,x;return (function(){x=this._apply(\"transFn\");return [\"this._consumedBy(\",x,\")\"].join(\"\")}).call(this)},\n\"IdxConsBy\":function(){var $elf=this,_fromIdx=this.input.idx,x;return (function(){x=this._apply(\"transFn\");return [\"this._idxConsumedBy(\",x,\")\"].join(\"\")}).call(this)},\n\"JumpTable\":function(){var $elf=this,_fromIdx=this.input.idx,cases;return (function(){cases=this._many((function(){return this._apply(\"jtCase\")}));return this.jumpTableCode(cases)}).call(this)},\n\"Interleave\":function(){var $elf=this,_fromIdx=this.input.idx,xs;return (function(){xs=this._many((function(){return this._apply(\"intPart\")}));return [\"this._interleave(\",xs.join(\",\"),\")\"].join(\"\")}).call(this)},\n\"Rule\":function(){var $elf=this,_fromIdx=this.input.idx,name,ls,body;return (function(){name=this._apply(\"anything\");(this[\"rName\"]=name);ls=this._apply(\"locals\");body=this._apply(\"trans\");return [\"\\n\\\"\",name,\"\\\":function(){\",ls,\"return \",body,\"}\"].join(\"\")}).call(this)},\n\"Grammar\":function(){var $elf=this,_fromIdx=this.input.idx,name,sName,rules;return (function(){name=this._apply(\"anything\");sName=this._apply(\"anything\");(this[\"name\"]=name);(this[\"sName\"]=sName);rules=this._many((function(){return this._apply(\"trans\")}));return [name,\"=objectThatDelegatesTo(\",sName,\",{\",rules.join(\",\"),\"})\"].join(\"\")}).call(this)},\n\"intPart\":function(){var $elf=this,_fromIdx=this.input.idx,mode,part;return (function(){this._form((function(){return (function(){mode=this._apply(\"anything\");return part=this._apply(\"transFn\")}).call(this)}));return ((mode.toProgramString() + \",\") + part)}).call(this)},\n\"jtCase\":function(){var $elf=this,_fromIdx=this.input.idx,x,e;return (function(){this._form((function(){return (function(){x=this._apply(\"anything\");return e=this._apply(\"trans\")}).call(this)}));return [x.toProgramString(),e]}).call(this)},\n\"locals\":function(){var $elf=this,_fromIdx=this.input.idx,vs;return this._or((function(){return (function(){this._form((function(){return vs=this._many1((function(){return this._apply(\"string\")}))}));return [\"var \",vs.join(\",\"),\";\"].join(\"\")}).call(this)}),(function(){return (function(){this._form((function(){return undefined}));return \"\"}).call(this)}))},\n\"trans\":function(){var $elf=this,_fromIdx=this.input.idx,t,ans;return (function(){this._form((function(){return (function(){t=this._apply(\"anything\");return ans=this._applyWithArgs(\"apply\",t)}).call(this)}));return ans}).call(this)},\n\"transFn\":function(){var $elf=this,_fromIdx=this.input.idx,x;return (function(){x=this._apply(\"trans\");return [\"(function(){return \",x,\"})\"].join(\"\")}).call(this)}});(BSOMetaTranslator[\"jumpTableCode\"]=(function (cases){var buf=new StringBuffer();buf.nextPutAll(\"(function(){switch(this._apply(\\'anything\\')){\");for(var i=(0);(i < cases[\"length\"]);(i+=(1))){buf.nextPutAll(((((\"case \" + cases[i][(0)]) + \":return \") + cases[i][(1)]) + \";\"))};buf.nextPutAll(\"default: throw fail}}).call(this)\");return buf.contents()}))}"},
	{"name": "OMeta Optimizer",
	 "language": "ometa parser",
	 "editor": {"name": "ACE", "height": "300px", "gutters": true},
	 "contents": "// TODO: turn off the \"seq\" inliner when G.seq !== OMeta.seq (will require some refactoring)\n// TODO: add a factorizing optimization (will make jumptables more useful)\n\nometa BSNullOptimization {\n  setHelped = !(this._didSomething = true),\n  helped    = ?this._didSomething,\n  trans     = [:t ?(this[t] != undefined) apply(t):ans] -> ans,\n  optimize  = trans:x helped                         -> x,\n\n  App        :rule anything*:args          -> ['App', rule].concat(args),\n  Act        :expr                         -> ['Act', expr],\n  Pred       :expr                         -> ['Pred', expr],\n  Or         trans*:xs                     -> ['Or'].concat(xs),\n  XOr        trans*:xs                     -> ['XOr'].concat(xs),\n  And        trans*:xs                     -> ['And'].concat(xs),\n  Opt        trans:x                       -> ['Opt',  x],\n  Many       trans:x                       -> ['Many',  x],\n  Many1      trans:x                       -> ['Many1', x],\n  Set        :n trans:v                    -> ['Set', n, v],\n  Not        trans:x                       -> ['Not',       x],\n  Lookahead  trans:x                       -> ['Lookahead', x],\n  Form       trans:x                       -> ['Form',      x],\n  ConsBy     trans:x                       -> ['ConsBy',    x],\n  IdxConsBy  trans:x                       -> ['IdxConsBy', x],\n  JumpTable  ([:c trans:e] -> [c, e])*:ces -> ['JumpTable'].concat(ces),\n  Interleave ([:m trans:p] -> [m, p])*:xs  -> ['Interleave'].concat(xs),\n  Rule       :name :ls trans:body          -> ['Rule', name, ls, body]\n}\nBSNullOptimization.initialize = function() { this._didSomething = false }\n\nometa BSAssociativeOptimization <: BSNullOptimization {\n  And trans:x end           setHelped -> x,\n  And transInside('And'):xs           -> ['And'].concat(xs),\n  Or  trans:x end           setHelped -> x,\n  Or  transInside('Or'):xs            -> ['Or'].concat(xs),\n  XOr trans:x end           setHelped -> x,\n  XOr transInside('XOr'):xs           -> ['XOr'].concat(xs),\n\n  transInside :t = [exactly(t) transInside(t):xs] transInside(t):ys setHelped -> xs.concat(ys)\n                 | trans:x                        transInside(t):xs           -> [x].concat(xs)\n                 |                                                            -> []\n}\n\nometa BSSeqInliner <: BSNullOptimization {\n  App        = 'seq' :s end seqString(s):cs setHelped -> ['And'].concat(cs).concat([['Act', s]])\n             | :rule anything*:args                   -> ['App', rule].concat(args),\n  inlineChar = BSOMetaParser.eChar:c ~end             -> ['App', 'exactly', c.toProgramString()],\n  seqString  = &(:s ?(typeof s === 'string'))\n                 ( ['\"'  inlineChar*:cs '\"' ]         -> cs\n                 | ['\\'' inlineChar*:cs '\\'']         -> cs\n                 )\n}\n\nJumpTable = function(choiceOp, choice) {\n  this.choiceOp = choiceOp\n  this.choices = {}\n  this.add(choice)\n}\nJumpTable.prototype.add = function(choice) {\n  var c = choice[0], t = choice[1]\n  if (this.choices[c]) {\n    if (this.choices[c][0] == this.choiceOp)\n      this.choices[c].push(t)\n    else\n      this.choices[c] = [this.choiceOp, this.choices[c], t]\n  }\n  else\n    this.choices[c] = t\n}\nJumpTable.prototype.toTree = function() {\n  var r = ['JumpTable'], choiceKeys = ownPropertyNames(this.choices)\n  for (var i = 0; i < choiceKeys.length; i += 1)\n    r.push([choiceKeys[i], this.choices[choiceKeys[i]]])\n  return r\n}\nometa BSJumpTableOptimization <: BSNullOptimization {\n  Or  (jtChoices('Or')  | trans)*:cs -> ['Or'].concat(cs),\n  XOr (jtChoices('XOr') | trans)*:cs -> ['XOr'].concat(cs),\n  quotedString  = &string [ '\"'  (BSOMetaParser.eChar:c ~end -> c)*:cs '\"'\n                          | '\\'' (BSOMetaParser.eChar:c ~end -> c)*:cs '\\'']               -> cs.join(''),\n  jtChoice      = ['And' ['App' 'exactly' quotedString:x] anything*:rest]                  -> [x, ['And'].concat(rest)]\n                |        ['App' 'exactly' quotedString:x]                                  -> [x, ['Act', x.toProgramString()]],\n  jtChoices :op = jtChoice:c {new JumpTable(op, c)}:jt (jtChoice:c {jt.add(c)})* setHelped -> jt.toTree()\n}\n\nometa BSOMetaOptimizer {\n  optimizeGrammar = ['Grammar' :n :sn optimizeRule*:rs]          -> ['Grammar', n, sn].concat(rs),\n  optimizeRule    = :r (BSSeqInliner.optimize(r):r | empty)\n                       ( BSAssociativeOptimization.optimize(r):r\n                       | BSJumpTableOptimization.optimize(r):r\n                       )*                                        -> r\n}"},
	{"name": "OMeta Optimizer code",
	 "language": "Javascript code",
	 "inputView": "OMeta Optimizer",
	 "editor": {"name": "ACE", "height": "300px", "gutters": true, "readOnly": true},
	 "contents": "{BSNullOptimization=objectThatDelegatesTo(OMeta,{\n\"setHelped\":function(){var $elf=this,_fromIdx=this.input.idx;return (this[\"_didSomething\"]=true)},\n\"helped\":function(){var $elf=this,_fromIdx=this.input.idx;return this._pred(this[\"_didSomething\"])},\n\"trans\":function(){var $elf=this,_fromIdx=this.input.idx,t,ans;return (function(){this._form((function(){return (function(){t=this._apply(\"anything\");this._pred((this[t] != undefined));return ans=this._applyWithArgs(\"apply\",t)}).call(this)}));return ans}).call(this)},\n\"optimize\":function(){var $elf=this,_fromIdx=this.input.idx,x;return (function(){x=this._apply(\"trans\");this._apply(\"helped\");return x}).call(this)},\n\"App\":function(){var $elf=this,_fromIdx=this.input.idx,rule,args;return (function(){rule=this._apply(\"anything\");args=this._many((function(){return this._apply(\"anything\")}));return [\"App\",rule].concat(args)}).call(this)},\n\"Act\":function(){var $elf=this,_fromIdx=this.input.idx,expr;return (function(){expr=this._apply(\"anything\");return [\"Act\",expr]}).call(this)},\n\"Pred\":function(){var $elf=this,_fromIdx=this.input.idx,expr;return (function(){expr=this._apply(\"anything\");return [\"Pred\",expr]}).call(this)},\n\"Or\":function(){var $elf=this,_fromIdx=this.input.idx,xs;return (function(){xs=this._many((function(){return this._apply(\"trans\")}));return [\"Or\"].concat(xs)}).call(this)},\n\"XOr\":function(){var $elf=this,_fromIdx=this.input.idx,xs;return (function(){xs=this._many((function(){return this._apply(\"trans\")}));return [\"XOr\"].concat(xs)}).call(this)},\n\"And\":function(){var $elf=this,_fromIdx=this.input.idx,xs;return (function(){xs=this._many((function(){return this._apply(\"trans\")}));return [\"And\"].concat(xs)}).call(this)},\n\"Opt\":function(){var $elf=this,_fromIdx=this.input.idx,x;return (function(){x=this._apply(\"trans\");return [\"Opt\",x]}).call(this)},\n\"Many\":function(){var $elf=this,_fromIdx=this.input.idx,x;return (function(){x=this._apply(\"trans\");return [\"Many\",x]}).call(this)},\n\"Many1\":function(){var $elf=this,_fromIdx=this.input.idx,x;return (function(){x=this._apply(\"trans\");return [\"Many1\",x]}).call(this)},\n\"Set\":function(){var $elf=this,_fromIdx=this.input.idx,n,v;return (function(){n=this._apply(\"anything\");v=this._apply(\"trans\");return [\"Set\",n,v]}).call(this)},\n\"Not\":function(){var $elf=this,_fromIdx=this.input.idx,x;return (function(){x=this._apply(\"trans\");return [\"Not\",x]}).call(this)},\n\"Lookahead\":function(){var $elf=this,_fromIdx=this.input.idx,x;return (function(){x=this._apply(\"trans\");return [\"Lookahead\",x]}).call(this)},\n\"Form\":function(){var $elf=this,_fromIdx=this.input.idx,x;return (function(){x=this._apply(\"trans\");return [\"Form\",x]}).call(this)},\n\"ConsBy\":function(){var $elf=this,_fromIdx=this.input.idx,x;return (function(){x=this._apply(\"trans\");return [\"ConsBy\",x]}).call(this)},\n\"IdxConsBy\":function(){var $elf=this,_fromIdx=this.input.idx,x;return (function(){x=this._apply(\"trans\");return [\"IdxConsBy\",x]}).call(this)},\n\"JumpTable\":function(){var $elf=this,_fromIdx=this.input.idx,c,e,ces;return (function(){ces=this._many((function(){return (function(){this._form((function(){return (function(){c=this._apply(\"anything\");return e=this._apply(\"trans\")}).call(this)}));return [c,e]}).call(this)}));return [\"JumpTable\"].concat(ces)}).call(this)},\n\"Interleave\":function(){var $elf=this,_fromIdx=this.input.idx,m,p,xs;return (function(){xs=this._many((function(){return (function(){this._form((function(){return (function(){m=this._apply(\"anything\");return p=this._apply(\"trans\")}).call(this)}));return [m,p]}).call(this)}));return [\"Interleave\"].concat(xs)}).call(this)},\n\"Rule\":function(){var $elf=this,_fromIdx=this.input.idx,name,ls,body;return (function(){name=this._apply(\"anything\");ls=this._apply(\"anything\");body=this._apply(\"trans\");return [\"Rule\",name,ls,body]}).call(this)}});(BSNullOptimization[\"initialize\"]=(function (){(this[\"_didSomething\"]=false)}));BSAssociativeOptimization=objectThatDelegatesTo(BSNullOptimization,{\n\"And\":function(){var $elf=this,_fromIdx=this.input.idx,x,xs;return this._or((function(){return (function(){x=this._apply(\"trans\");this._apply(\"end\");this._apply(\"setHelped\");return x}).call(this)}),(function(){return (function(){xs=this._applyWithArgs(\"transInside\",\"And\");return [\"And\"].concat(xs)}).call(this)}))},\n\"Or\":function(){var $elf=this,_fromIdx=this.input.idx,x,xs;return this._or((function(){return (function(){x=this._apply(\"trans\");this._apply(\"end\");this._apply(\"setHelped\");return x}).call(this)}),(function(){return (function(){xs=this._applyWithArgs(\"transInside\",\"Or\");return [\"Or\"].concat(xs)}).call(this)}))},\n\"XOr\":function(){var $elf=this,_fromIdx=this.input.idx,x,xs;return this._or((function(){return (function(){x=this._apply(\"trans\");this._apply(\"end\");this._apply(\"setHelped\");return x}).call(this)}),(function(){return (function(){xs=this._applyWithArgs(\"transInside\",\"XOr\");return [\"XOr\"].concat(xs)}).call(this)}))},\n\"transInside\":function(){var $elf=this,_fromIdx=this.input.idx,t,xs,ys,x;return (function(){t=this._apply(\"anything\");return this._or((function(){return (function(){this._form((function(){return (function(){this._applyWithArgs(\"exactly\",t);return xs=this._applyWithArgs(\"transInside\",t)}).call(this)}));ys=this._applyWithArgs(\"transInside\",t);this._apply(\"setHelped\");return xs.concat(ys)}).call(this)}),(function(){return (function(){x=this._apply(\"trans\");xs=this._applyWithArgs(\"transInside\",t);return [x].concat(xs)}).call(this)}),(function(){return []}))}).call(this)}});BSSeqInliner=objectThatDelegatesTo(BSNullOptimization,{\n\"App\":function(){var $elf=this,_fromIdx=this.input.idx,s,cs,rule,args;return this._or((function(){return (function(){switch(this._apply('anything')){case \"seq\":return (function(){s=this._apply(\"anything\");this._apply(\"end\");cs=this._applyWithArgs(\"seqString\",s);this._apply(\"setHelped\");return [\"And\"].concat(cs).concat([[\"Act\",s]])}).call(this);default: throw fail}}).call(this)}),(function(){return (function(){rule=this._apply(\"anything\");args=this._many((function(){return this._apply(\"anything\")}));return [\"App\",rule].concat(args)}).call(this)}))},\n\"inlineChar\":function(){var $elf=this,_fromIdx=this.input.idx,c;return (function(){c=this._applyWithArgs(\"foreign\",BSOMetaParser,'eChar');this._not((function(){return this._apply(\"end\")}));return [\"App\",\"exactly\",c.toProgramString()]}).call(this)},\n\"seqString\":function(){var $elf=this,_fromIdx=this.input.idx,s,cs;return (function(){this._lookahead((function(){return (function(){s=this._apply(\"anything\");return this._pred(((typeof s) === \"string\"))}).call(this)}));return this._or((function(){return (function(){this._form((function(){return (function(){this._applyWithArgs(\"exactly\",\"\\\"\");cs=this._many((function(){return this._apply(\"inlineChar\")}));return this._applyWithArgs(\"exactly\",\"\\\"\")}).call(this)}));return cs}).call(this)}),(function(){return (function(){this._form((function(){return (function(){this._applyWithArgs(\"exactly\",\"\\'\");cs=this._many((function(){return this._apply(\"inlineChar\")}));return this._applyWithArgs(\"exactly\",\"\\'\")}).call(this)}));return cs}).call(this)}))}).call(this)}});(JumpTable=(function (choiceOp,choice){(this[\"choiceOp\"]=choiceOp);(this[\"choices\"]=({}));this.add(choice)}));(JumpTable[\"prototype\"][\"add\"]=(function (choice){{var c=choice[(0)];var t=choice[(1)]};if(this[\"choices\"][c]){if((this[\"choices\"][c][(0)] == this[\"choiceOp\"])){this[\"choices\"][c].push(t)}else{(this[\"choices\"][c]=[this[\"choiceOp\"],this[\"choices\"][c],t])}}else{(this[\"choices\"][c]=t)}}));(JumpTable[\"prototype\"][\"toTree\"]=(function (){{var r=[\"JumpTable\"];var choiceKeys=ownPropertyNames(this[\"choices\"])};for(var i=(0);(i < choiceKeys[\"length\"]);(i+=(1))){r.push([choiceKeys[i],this[\"choices\"][choiceKeys[i]]])};return r}));BSJumpTableOptimization=objectThatDelegatesTo(BSNullOptimization,{\n\"Or\":function(){var $elf=this,_fromIdx=this.input.idx,cs;return (function(){cs=this._many((function(){return this._or((function(){return this._applyWithArgs(\"jtChoices\",\"Or\")}),(function(){return this._apply(\"trans\")}))}));return [\"Or\"].concat(cs)}).call(this)},\n\"XOr\":function(){var $elf=this,_fromIdx=this.input.idx,cs;return (function(){cs=this._many((function(){return this._or((function(){return this._applyWithArgs(\"jtChoices\",\"XOr\")}),(function(){return this._apply(\"trans\")}))}));return [\"XOr\"].concat(cs)}).call(this)},\n\"quotedString\":function(){var $elf=this,_fromIdx=this.input.idx,c,cs;return (function(){this._lookahead((function(){return this._apply(\"string\")}));this._form((function(){return (function(){switch(this._apply('anything')){case \"\\\"\":return (function(){cs=this._many((function(){return (function(){c=this._applyWithArgs(\"foreign\",BSOMetaParser,'eChar');this._not((function(){return this._apply(\"end\")}));return c}).call(this)}));return this._applyWithArgs(\"exactly\",\"\\\"\")}).call(this);case \"\\'\":return (function(){cs=this._many((function(){return (function(){c=this._applyWithArgs(\"foreign\",BSOMetaParser,'eChar');this._not((function(){return this._apply(\"end\")}));return c}).call(this)}));return this._applyWithArgs(\"exactly\",\"\\'\")}).call(this);default: throw fail}}).call(this)}));return cs.join(\"\")}).call(this)},\n\"jtChoice\":function(){var $elf=this,_fromIdx=this.input.idx,x,rest;return this._or((function(){return (function(){this._form((function(){return (function(){this._applyWithArgs(\"exactly\",\"And\");this._form((function(){return (function(){this._applyWithArgs(\"exactly\",\"App\");this._applyWithArgs(\"exactly\",\"exactly\");return x=this._apply(\"quotedString\")}).call(this)}));return rest=this._many((function(){return this._apply(\"anything\")}))}).call(this)}));return [x,[\"And\"].concat(rest)]}).call(this)}),(function(){return (function(){this._form((function(){return (function(){this._applyWithArgs(\"exactly\",\"App\");this._applyWithArgs(\"exactly\",\"exactly\");return x=this._apply(\"quotedString\")}).call(this)}));return [x,[\"Act\",x.toProgramString()]]}).call(this)}))},\n\"jtChoices\":function(){var $elf=this,_fromIdx=this.input.idx,op,c,jt;return (function(){op=this._apply(\"anything\");c=this._apply(\"jtChoice\");jt=new JumpTable(op,c);this._many((function(){return (function(){c=this._apply(\"jtChoice\");return jt.add(c)}).call(this)}));this._apply(\"setHelped\");return jt.toTree()}).call(this)}});BSOMetaOptimizer=objectThatDelegatesTo(OMeta,{\n\"optimizeGrammar\":function(){var $elf=this,_fromIdx=this.input.idx,n,sn,rs;return (function(){this._form((function(){return (function(){this._applyWithArgs(\"exactly\",\"Grammar\");n=this._apply(\"anything\");sn=this._apply(\"anything\");return rs=this._many((function(){return this._apply(\"optimizeRule\")}))}).call(this)}));return [\"Grammar\",n,sn].concat(rs)}).call(this)},\n\"optimizeRule\":function(){var $elf=this,_fromIdx=this.input.idx,r;return (function(){r=this._apply(\"anything\");this._or((function(){return r=this._applyWithArgs(\"foreign\",BSSeqInliner,'optimize',r)}),(function(){return this._apply(\"empty\")}));this._many((function(){return this._or((function(){return r=this._applyWithArgs(\"foreign\",BSAssociativeOptimization,'optimize',r)}),(function(){return r=this._applyWithArgs(\"foreign\",BSJumpTableOptimization,'optimize',r)}))}));return r}).call(this)}})}"},
	{"name": "OMeta JS Compiler",
	 "language": "ometa parser",
	 "editor": {"name": "ACE", "height": "150px", "gutters": true},
	 "contents": "ometa BSOMetaJSParser <: BSJSParser {\n  srcElem = spaces BSOMetaParser.grammar:r sc -> r\n          | ^srcElem\n}\n\nometa BSOMetaJSTranslator <: BSJSTranslator {\n  Grammar = BSOMetaTranslator.Grammar\n}"},
	{"name": "OMeta JS code",
	 "language": "Javascript code",
	 "inputView": "OMeta JS Compiler",
	 "editor": {"name": "ACE", "gutters": true, "readOnly": true},
	 "contents": "{BSOMetaJSParser=objectThatDelegatesTo(BSJSParser,{\n\"srcElem\":function(){var $elf=this,_fromIdx=this.input.idx,r;return this._or((function(){return (function(){this._apply(\"spaces\");r=this._applyWithArgs(\"foreign\",BSOMetaParser,'grammar');this._apply(\"sc\");return r}).call(this)}),(function(){return BSJSParser._superApplyWithArgs(this,'srcElem')}))}});BSOMetaJSTranslator=objectThatDelegatesTo(BSJSTranslator,{\n\"Grammar\":function(){var $elf=this,_fromIdx=this.input.idx;return this._applyWithArgs(\"foreign\",BSOMetaTranslator,'Grammar')}})}"}],
 "currentView": "OMeta JS code"}